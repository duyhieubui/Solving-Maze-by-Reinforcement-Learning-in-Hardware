;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit sloving_maze_by_RL : 
  module Agent : 
    input clock : Clock
    input reset : Reset
    output io : {flip ROW : UInt<3>, flip COL : UInt<3>, flip new_state : UInt<6>, iterate : UInt<1>, x : UInt<3>, y : UInt<3>, state : UInt<6>, episode : UInt<10>, done_learning : UInt<1>, flip load_new_state : UInt<1>, step : UInt<4>, t : UInt<1>}
    
    reg ROW : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Blocks.scala 18:18]
    reg COL : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Blocks.scala 19:18]
    reg state : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Blocks.scala 20:20]
    reg episode : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Blocks.scala 21:22]
    node start_again = eq(state, UInt<5>("h018")) @[Blocks.scala 22:24]
    reg step : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Blocks.scala 23:21]
    ROW <= io.ROW @[Blocks.scala 26:6]
    COL <= io.COL @[Blocks.scala 27:6]
    node t = eq(step, UInt<4>("h0f")) @[Blocks.scala 28:14]
    node iterate = or(start_again, t) @[Blocks.scala 29:26]
    io.iterate <= iterate @[Blocks.scala 30:13]
    io.t <= t @[Blocks.scala 31:7]
    node _T = eq(iterate, UInt<1>("h01")) @[Blocks.scala 32:15]
    when _T : @[Blocks.scala 32:25]
      state <= UInt<1>("h00") @[Blocks.scala 33:10]
      node _T_1 = add(episode, UInt<1>("h01")) @[Blocks.scala 34:21]
      node _T_2 = tail(_T_1, 1) @[Blocks.scala 34:21]
      episode <= _T_2 @[Blocks.scala 34:12]
      node _T_3 = eq(step, UInt<4>("h0f")) @[Blocks.scala 35:14]
      when _T_3 : @[Blocks.scala 35:22]
        step <= UInt<1>("h00") @[Blocks.scala 36:11]
        skip @[Blocks.scala 35:22]
      skip @[Blocks.scala 32:25]
    else : @[Blocks.scala 38:4]
      when io.load_new_state : @[Blocks.scala 39:28]
        state <= io.new_state @[Blocks.scala 40:13]
        io.done_learning <= UInt<1>("h00") @[Blocks.scala 41:24]
        node _T_4 = add(step, UInt<1>("h01")) @[Blocks.scala 42:17]
        node _T_5 = tail(_T_4, 1) @[Blocks.scala 42:17]
        step <= _T_5 @[Blocks.scala 42:11]
        node _T_6 = eq(step, UInt<4>("h0f")) @[Blocks.scala 43:16]
        when _T_6 : @[Blocks.scala 43:24]
          step <= UInt<1>("h00") @[Blocks.scala 44:13]
          skip @[Blocks.scala 43:24]
        skip @[Blocks.scala 39:28]
      skip @[Blocks.scala 38:4]
    node _T_7 = eq(episode, UInt<9>("h012c")) @[Blocks.scala 49:15]
    when _T_7 : @[Blocks.scala 49:24]
      io.done_learning <= UInt<1>("h01") @[Blocks.scala 50:21]
      skip @[Blocks.scala 49:24]
    else : @[Blocks.scala 51:4]
      io.done_learning <= UInt<1>("h00") @[Blocks.scala 52:21]
      skip @[Blocks.scala 51:4]
    node _T_8 = rem(state, COL) @[Blocks.scala 55:14]
    io.x <= _T_8 @[Blocks.scala 55:7]
    node _T_9 = div(state, COL) @[Blocks.scala 56:14]
    io.y <= _T_9 @[Blocks.scala 56:7]
    io.state <= state @[Blocks.scala 57:11]
    io.episode <= episode @[Blocks.scala 58:13]
    io.step <= step @[Blocks.scala 59:10]
    
  module Action_FMS : 
    input clock : Clock
    input reset : Reset
    output io : {flip reset_Action_fms : UInt<1>, flip exploit : UInt<1>, flip validAction : UInt<1>, move_to_confirming_Reward : UInt<1>, keep_action : UInt<1>}
    
    reg action_FMS : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 14:27]
    io.move_to_confirming_Reward <= UInt<1>("h00") @[Action and ActionFMS.scala 15:32]
    io.keep_action <= UInt<1>("h01") @[Action and ActionFMS.scala 17:17]
    when io.reset_Action_fms : @[Action and ActionFMS.scala 18:29]
      action_FMS <= UInt<3>("h00") @[Action and ActionFMS.scala 19:16]
      skip @[Action and ActionFMS.scala 18:29]
    else : @[Action and ActionFMS.scala 20:5]
      node _T = eq(UInt<3>("h00"), action_FMS) @[Conditional.scala 37:30]
      when _T : @[Conditional.scala 40:58]
        io.keep_action <= UInt<1>("h00") @[Action and ActionFMS.scala 23:23]
        when io.exploit : @[Action and ActionFMS.scala 24:25]
          action_FMS <= UInt<3>("h01") @[Action and ActionFMS.scala 25:22]
          skip @[Action and ActionFMS.scala 24:25]
        else : @[Action and ActionFMS.scala 26:10]
          action_FMS <= UInt<3>("h02") @[Action and ActionFMS.scala 27:22]
          skip @[Action and ActionFMS.scala 26:10]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_1 = eq(UInt<3>("h01"), action_FMS) @[Conditional.scala 37:30]
        when _T_1 : @[Conditional.scala 39:67]
          action_FMS <= UInt<3>("h03") @[Action and ActionFMS.scala 31:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_2 = eq(UInt<3>("h02"), action_FMS) @[Conditional.scala 37:30]
          when _T_2 : @[Conditional.scala 39:67]
            action_FMS <= UInt<3>("h03") @[Action and ActionFMS.scala 34:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_3 = eq(UInt<3>("h03"), action_FMS) @[Conditional.scala 37:30]
            when _T_3 : @[Conditional.scala 39:67]
              action_FMS <= UInt<3>("h04") @[Action and ActionFMS.scala 37:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_4 = eq(UInt<3>("h04"), action_FMS) @[Conditional.scala 37:30]
              when _T_4 : @[Conditional.scala 39:67]
                when io.validAction : @[Action and ActionFMS.scala 40:29]
                  io.move_to_confirming_Reward <= UInt<1>("h01") @[Action and ActionFMS.scala 41:40]
                  action_FMS <= UInt<3>("h04") @[Action and ActionFMS.scala 42:22]
                  skip @[Action and ActionFMS.scala 40:29]
                else : @[Action and ActionFMS.scala 43:10]
                  action_FMS <= UInt<3>("h00") @[Action and ActionFMS.scala 44:22]
                  skip @[Action and ActionFMS.scala 43:10]
                skip @[Conditional.scala 39:67]
      skip @[Action and ActionFMS.scala 20:5]
    
  module Action : 
    input clock : Clock
    input reset : Reset
    output io : {flip x : UInt<3>, flip y : UInt<3>, flip rand2 : UInt<10>, new_state : UInt<6>, act : UInt<2>, flip action_at_Qmax : UInt<2>, flip exploit : UInt<1>, validAction : UInt<1>, flip keep_action : UInt<1>}
    
    reg act : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action and ActionFMS.scala 64:20]
    reg x_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 65:22]
    reg y_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 66:22]
    reg new_state : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Action and ActionFMS.scala 67:24]
    reg action_at_Qmax : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action and ActionFMS.scala 68:29]
    action_at_Qmax <= io.action_at_Qmax @[Action and ActionFMS.scala 70:17]
    node _T = eq(io.keep_action, UInt<1>("h00")) @[Action and ActionFMS.scala 71:22]
    when _T : @[Action and ActionFMS.scala 71:33]
      when io.exploit : @[Action and ActionFMS.scala 72:21]
        act <= action_at_Qmax @[Action and ActionFMS.scala 73:11]
        skip @[Action and ActionFMS.scala 72:21]
      else : @[Action and ActionFMS.scala 74:6]
        node _T_1 = leq(io.rand2, UInt<8>("h0fa")) @[Action and ActionFMS.scala 75:21]
        when _T_1 : @[Action and ActionFMS.scala 75:31]
          act <= UInt<1>("h00") @[Action and ActionFMS.scala 76:13]
          skip @[Action and ActionFMS.scala 75:31]
        else : @[Action and ActionFMS.scala 77:72]
          node _T_2 = lt(UInt<8>("h0fa"), io.rand2) @[Action and ActionFMS.scala 77:25]
          node _T_3 = leq(io.rand2, UInt<9>("h01f4")) @[Action and ActionFMS.scala 77:50]
          node _T_4 = eq(_T_3, UInt<1>("h01")) @[Action and ActionFMS.scala 77:60]
          node _T_5 = and(_T_2, _T_4) @[Action and ActionFMS.scala 77:37]
          when _T_5 : @[Action and ActionFMS.scala 77:72]
            act <= UInt<1>("h01") @[Action and ActionFMS.scala 78:13]
            skip @[Action and ActionFMS.scala 77:72]
          else : @[Action and ActionFMS.scala 79:72]
            node _T_6 = lt(UInt<9>("h01f4"), io.rand2) @[Action and ActionFMS.scala 79:25]
            node _T_7 = leq(io.rand2, UInt<10>("h02ee")) @[Action and ActionFMS.scala 79:50]
            node _T_8 = eq(_T_7, UInt<1>("h01")) @[Action and ActionFMS.scala 79:60]
            node _T_9 = and(_T_6, _T_8) @[Action and ActionFMS.scala 79:37]
            when _T_9 : @[Action and ActionFMS.scala 79:72]
              act <= UInt<2>("h02") @[Action and ActionFMS.scala 80:13]
              skip @[Action and ActionFMS.scala 79:72]
            else : @[Action and ActionFMS.scala 81:9]
              act <= UInt<2>("h03") @[Action and ActionFMS.scala 82:13]
              skip @[Action and ActionFMS.scala 81:9]
        skip @[Action and ActionFMS.scala 74:6]
      skip @[Action and ActionFMS.scala 71:33]
    node _T_10 = eq(act, UInt<1>("h00")) @[Action and ActionFMS.scala 86:12]
    when _T_10 : @[Action and ActionFMS.scala 86:21]
      node _T_11 = add(io.y, UInt<1>("h01")) @[Action and ActionFMS.scala 87:19]
      node _T_12 = tail(_T_11, 1) @[Action and ActionFMS.scala 87:19]
      y_new <= _T_12 @[Action and ActionFMS.scala 87:11]
      x_new <= io.x @[Action and ActionFMS.scala 88:11]
      skip @[Action and ActionFMS.scala 86:21]
    else : @[Action and ActionFMS.scala 89:27]
      node _T_13 = eq(act, UInt<1>("h01")) @[Action and ActionFMS.scala 89:18]
      when _T_13 : @[Action and ActionFMS.scala 89:27]
        node _T_14 = sub(io.x, UInt<1>("h01")) @[Action and ActionFMS.scala 90:19]
        node _T_15 = tail(_T_14, 1) @[Action and ActionFMS.scala 90:19]
        x_new <= _T_15 @[Action and ActionFMS.scala 90:11]
        y_new <= io.y @[Action and ActionFMS.scala 91:11]
        skip @[Action and ActionFMS.scala 89:27]
      else : @[Action and ActionFMS.scala 92:27]
        node _T_16 = eq(act, UInt<2>("h02")) @[Action and ActionFMS.scala 92:18]
        when _T_16 : @[Action and ActionFMS.scala 92:27]
          node _T_17 = sub(io.y, UInt<1>("h01")) @[Action and ActionFMS.scala 93:19]
          node _T_18 = tail(_T_17, 1) @[Action and ActionFMS.scala 93:19]
          y_new <= _T_18 @[Action and ActionFMS.scala 93:11]
          x_new <= io.x @[Action and ActionFMS.scala 94:11]
          skip @[Action and ActionFMS.scala 92:27]
        else : @[Action and ActionFMS.scala 95:5]
          node _T_19 = add(io.x, UInt<1>("h01")) @[Action and ActionFMS.scala 96:19]
          node _T_20 = tail(_T_19, 1) @[Action and ActionFMS.scala 96:19]
          x_new <= _T_20 @[Action and ActionFMS.scala 96:11]
          y_new <= io.y @[Action and ActionFMS.scala 97:11]
          skip @[Action and ActionFMS.scala 95:5]
    node _T_21 = eq(x_new, UInt<3>("h07")) @[Action and ActionFMS.scala 99:14]
    node _T_22 = eq(x_new, UInt<3>("h05")) @[Action and ActionFMS.scala 99:31]
    node _T_23 = or(_T_21, _T_22) @[Action and ActionFMS.scala 99:22]
    node _T_24 = eq(y_new, UInt<3>("h07")) @[Action and ActionFMS.scala 99:48]
    node _T_25 = or(_T_23, _T_24) @[Action and ActionFMS.scala 99:39]
    node _T_26 = eq(y_new, UInt<3>("h05")) @[Action and ActionFMS.scala 99:65]
    node _T_27 = or(_T_25, _T_26) @[Action and ActionFMS.scala 99:56]
    when _T_27 : @[Action and ActionFMS.scala 99:73]
      io.validAction <= UInt<1>("h00") @[Action and ActionFMS.scala 100:19]
      skip @[Action and ActionFMS.scala 99:73]
    else : @[Action and ActionFMS.scala 101:4]
      node _T_28 = mul(UInt<3>("h05"), y_new) @[Action and ActionFMS.scala 102:25]
      node _T_29 = add(x_new, _T_28) @[Action and ActionFMS.scala 102:21]
      node _T_30 = tail(_T_29, 1) @[Action and ActionFMS.scala 102:21]
      new_state <= _T_30 @[Action and ActionFMS.scala 102:14]
      io.validAction <= UInt<1>("h01") @[Action and ActionFMS.scala 103:19]
      skip @[Action and ActionFMS.scala 101:4]
    io.act <= act @[Action and ActionFMS.scala 105:9]
    io.new_state <= new_state @[Action and ActionFMS.scala 106:15]
    
  module takingAction : 
    input clock : Clock
    input reset : Reset
    output io : {flip x : UInt<3>, flip y : UInt<3>, flip rand1 : UInt<10>, flip rand2 : UInt<10>, flip episode : UInt<10>, new_state : UInt<6>, flip action_at_Qmax : UInt<2>, act : UInt<2>, flip reset_Action_fms : UInt<1>, move_to_confirming_Reward : UInt<1>}
    
    inst action_fms of Action_FMS @[taking_Action.scala 19:24]
    action_fms.clock <= clock
    action_fms.reset <= reset
    inst action of Action @[taking_Action.scala 20:20]
    action.clock <= clock
    action.reset <= reset
    reg epsilon : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[taking_Action.scala 21:24]
    node exploit = lt(io.episode, UInt<7>("h05a")) @[taking_Action.scala 26:26]
    action_fms.io.reset_Action_fms <= io.reset_Action_fms @[taking_Action.scala 29:33]
    action_fms.io.exploit <= exploit @[taking_Action.scala 30:24]
    action_fms.io.validAction <= action.io.validAction @[taking_Action.scala 31:28]
    action.io.keep_action <= action_fms.io.keep_action @[taking_Action.scala 32:28]
    action.io.exploit <= exploit @[taking_Action.scala 35:20]
    action.io.rand2 <= io.rand2 @[taking_Action.scala 37:18]
    action.io.x <= io.x @[taking_Action.scala 39:14]
    action.io.y <= io.y @[taking_Action.scala 40:14]
    action.io.action_at_Qmax <= io.action_at_Qmax @[taking_Action.scala 41:27]
    io.act <= action.io.act @[taking_Action.scala 43:9]
    io.new_state <= action.io.new_state @[taking_Action.scala 44:15]
    io.move_to_confirming_Reward <= action_fms.io.move_to_confirming_Reward @[taking_Action.scala 45:31]
    
  module Q_function : 
    input clock : Clock
    input reset : Reset
    output io : {flip Q_s_a : SInt<16>, flip Q_prime_max : SInt<16>, Q_updated : SInt<16>, flip cal : UInt<1>, flip reward : SInt<9>, wrEna : UInt<1>}
    
    reg Q_s_a : SInt<16>, clock with : (reset => (reset, asSInt(UInt<16>("h00")))) @[Q_function.scala 16:20]
    reg reward : SInt<9>, clock with : (reset => (reset, asSInt(UInt<9>("h00")))) @[Q_function.scala 17:21]
    Q_s_a <= io.Q_s_a @[Q_function.scala 18:8]
    reward <= io.reward @[Q_function.scala 20:9]
    when io.cal : @[Q_function.scala 22:15]
      node _T = mul(reward, asSInt(UInt<9>("h080"))) @[Q_function.scala 23:33]
      node _T_1 = add(Q_s_a, _T) @[Q_function.scala 23:26]
      node _T_2 = tail(_T_1, 1) @[Q_function.scala 23:26]
      node _T_3 = asSInt(_T_2) @[Q_function.scala 23:26]
      node _T_4 = div(_T_3, asSInt(UInt<3>("h02"))) @[Q_function.scala 23:40]
      node _T_5 = mul(io.Q_prime_max, asSInt(UInt<4>("h04"))) @[Q_function.scala 23:61]
      node _T_6 = div(_T_5, asSInt(UInt<5>("h0a"))) @[Q_function.scala 23:65]
      node _T_7 = add(_T_4, _T_6) @[Q_function.scala 23:45]
      node _T_8 = tail(_T_7, 1) @[Q_function.scala 23:45]
      node _T_9 = asSInt(_T_8) @[Q_function.scala 23:45]
      io.Q_updated <= _T_9 @[Q_function.scala 23:18]
      io.wrEna <= UInt<1>("h01") @[Q_function.scala 24:13]
      skip @[Q_function.scala 22:15]
    else : @[Q_function.scala 25:4]
      io.Q_updated <= asSInt(UInt<1>("h00")) @[Q_function.scala 26:17]
      io.wrEna <= UInt<1>("h00") @[Q_function.scala 27:13]
      skip @[Q_function.scala 25:4]
    
  module Max4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins0 : SInt<16>, flip ins1 : SInt<16>, flip ins2 : SInt<16>, flip ins3 : SInt<16>, Q_max : SInt<16>}
    
    wire ins : SInt<16>[4] @[Q_table.scala 82:15]
    ins[0] <= io.ins0 @[Q_table.scala 83:9]
    ins[1] <= io.ins1 @[Q_table.scala 84:9]
    ins[2] <= io.ins2 @[Q_table.scala 85:9]
    ins[3] <= io.ins3 @[Q_table.scala 86:9]
    node _T = gt(ins[0], ins[1]) @[Q_table.scala 81:46]
    node _T_1 = mux(_T, ins[0], ins[1]) @[Q_table.scala 81:43]
    node _T_2 = gt(_T_1, ins[2]) @[Q_table.scala 81:46]
    node _T_3 = mux(_T_2, _T_1, ins[2]) @[Q_table.scala 81:43]
    node _T_4 = gt(_T_3, ins[3]) @[Q_table.scala 81:46]
    node _T_5 = mux(_T_4, _T_3, ins[3]) @[Q_table.scala 81:43]
    io.Q_max <= _T_5 @[Q_table.scala 87:11]
    
  module Action_at_Qmax : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins0 : SInt<16>, flip ins1 : SInt<16>, flip ins2 : SInt<16>, flip ins3 : SInt<16>, action_at_Qmax : UInt<2>, flip Q_max_at_state_s : SInt<21>}
    
    wire ins : SInt<16>[4] @[Q_table.scala 98:15]
    ins[0] <= io.ins0 @[Q_table.scala 99:9]
    ins[1] <= io.ins1 @[Q_table.scala 100:9]
    ins[2] <= io.ins2 @[Q_table.scala 101:9]
    ins[3] <= io.ins3 @[Q_table.scala 102:9]
    node _T = eq(ins[0], io.Q_max_at_state_s) @[Q_table.scala 103:42]
    node _T_1 = eq(ins[1], io.Q_max_at_state_s) @[Q_table.scala 103:42]
    node _T_2 = eq(ins[2], io.Q_max_at_state_s) @[Q_table.scala 103:42]
    node _T_3 = eq(ins[3], io.Q_max_at_state_s) @[Q_table.scala 103:42]
    node _T_4 = mux(_T_2, UInt<2>("h02"), UInt<2>("h03")) @[Q_table.scala 103:36]
    node _T_5 = mux(_T_1, UInt<1>("h01"), _T_4) @[Q_table.scala 103:36]
    node _T_6 = mux(_T, UInt<1>("h00"), _T_5) @[Q_table.scala 103:36]
    io.action_at_Qmax <= _T_6 @[Q_table.scala 103:20]
    
  module Qtable : 
    input clock : Clock
    input reset : Reset
    output io : {flip state : UInt<6>, flip new_state : UInt<6>, flip act : UInt<2>, flip wrEna : UInt<1>, flip Q_updated : SInt<16>, Q_s_a : SInt<16>, Q_prime_max : SInt<16>, action_at_Qmax : UInt<2>, flip get_Q_prime_max : UInt<1>, flip write_data_into_a_txtfile : UInt<1>, flip act_read : UInt<2>, flip state_read : UInt<6>}
    
    inst max4 of Max4 @[Q_table.scala 19:18]
    max4.clock <= clock
    max4.reset <= reset
    inst index_of_Q_max of Action_at_Qmax @[Q_table.scala 20:28]
    index_of_Q_max.clock <= clock
    index_of_Q_max.reset <= reset
    smem Q_s_a0 : SInt<16>[25] @[Q_table.scala 22:25]
    smem Q_s_a1 : SInt<16>[25] @[Q_table.scala 23:25]
    smem Q_s_a2 : SInt<16>[25] @[Q_table.scala 24:25]
    smem Q_s_a3 : SInt<16>[25] @[Q_table.scala 25:25]
    reg state_addr : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Q_table.scala 26:25]
    state_addr <= io.state @[Q_table.scala 27:13]
    io.Q_s_a <= asSInt(UInt<1>("h00")) @[Q_table.scala 28:11]
    node act = mux(io.write_data_into_a_txtfile, io.act_read, io.act) @[Q_table.scala 29:14]
    node stateRead = mux(io.write_data_into_a_txtfile, io.state_read, io.state) @[Q_table.scala 30:20]
    node _T = eq(act, UInt<1>("h00")) @[Q_table.scala 31:11]
    when _T : @[Q_table.scala 31:18]
      when io.wrEna : @[Q_table.scala 32:20]
        node _T_1 = bits(state_addr, 4, 0)
        write mport _T_2 = Q_s_a0[_T_1], clock
        _T_2 <= io.Q_updated
        skip @[Q_table.scala 32:20]
      else : @[Q_table.scala 34:6]
        node _T_3 = bits(stateRead, 4, 0) @[Q_table.scala 35:28]
        read mport _T_4 = Q_s_a0[_T_3], clock @[Q_table.scala 35:28]
        io.Q_s_a <= _T_4 @[Q_table.scala 35:15]
        skip @[Q_table.scala 34:6]
      skip @[Q_table.scala 31:18]
    else : @[Q_table.scala 37:24]
      node _T_5 = eq(act, UInt<1>("h01")) @[Q_table.scala 37:17]
      when _T_5 : @[Q_table.scala 37:24]
        when io.wrEna : @[Q_table.scala 38:20]
          node _T_6 = bits(state_addr, 4, 0)
          write mport _T_7 = Q_s_a1[_T_6], clock
          _T_7 <= io.Q_updated
          skip @[Q_table.scala 38:20]
        else : @[Q_table.scala 40:6]
          node _T_8 = bits(stateRead, 4, 0) @[Q_table.scala 41:28]
          read mport _T_9 = Q_s_a1[_T_8], clock @[Q_table.scala 41:28]
          io.Q_s_a <= _T_9 @[Q_table.scala 41:15]
          skip @[Q_table.scala 40:6]
        skip @[Q_table.scala 37:24]
      else : @[Q_table.scala 43:24]
        node _T_10 = eq(act, UInt<2>("h02")) @[Q_table.scala 43:17]
        when _T_10 : @[Q_table.scala 43:24]
          when io.wrEna : @[Q_table.scala 44:20]
            node _T_11 = bits(state_addr, 4, 0)
            write mport _T_12 = Q_s_a2[_T_11], clock
            _T_12 <= io.Q_updated
            skip @[Q_table.scala 44:20]
          else : @[Q_table.scala 46:6]
            node _T_13 = bits(stateRead, 4, 0) @[Q_table.scala 47:28]
            read mport _T_14 = Q_s_a1[_T_13], clock @[Q_table.scala 47:28]
            io.Q_s_a <= _T_14 @[Q_table.scala 47:15]
            skip @[Q_table.scala 46:6]
          skip @[Q_table.scala 43:24]
        else : @[Q_table.scala 49:24]
          node _T_15 = eq(act, UInt<2>("h03")) @[Q_table.scala 49:17]
          when _T_15 : @[Q_table.scala 49:24]
            when io.wrEna : @[Q_table.scala 50:19]
              node _T_16 = bits(state_addr, 4, 0)
              write mport _T_17 = Q_s_a3[_T_16], clock
              _T_17 <= io.Q_updated
              skip @[Q_table.scala 50:19]
            else : @[Q_table.scala 52:6]
              node _T_18 = bits(stateRead, 4, 0) @[Q_table.scala 53:28]
              read mport _T_19 = Q_s_a3[_T_18], clock @[Q_table.scala 53:28]
              io.Q_s_a <= _T_19 @[Q_table.scala 53:15]
              skip @[Q_table.scala 52:6]
            skip @[Q_table.scala 49:24]
    node new_state_or_state = mux(io.get_Q_prime_max, io.new_state, io.state) @[Q_table.scala 58:29]
    node _T_20 = bits(new_state_or_state, 4, 0) @[Q_table.scala 59:28]
    read mport _T_21 = Q_s_a0[_T_20], clock @[Q_table.scala 59:28]
    max4.io.ins0 <= _T_21 @[Q_table.scala 59:15]
    node _T_22 = bits(new_state_or_state, 4, 0) @[Q_table.scala 60:28]
    read mport _T_23 = Q_s_a1[_T_22], clock @[Q_table.scala 60:28]
    max4.io.ins1 <= _T_23 @[Q_table.scala 60:15]
    node _T_24 = bits(new_state_or_state, 4, 0) @[Q_table.scala 61:28]
    read mport _T_25 = Q_s_a1[_T_24], clock @[Q_table.scala 61:28]
    max4.io.ins2 <= _T_25 @[Q_table.scala 61:15]
    node _T_26 = bits(new_state_or_state, 4, 0) @[Q_table.scala 62:28]
    read mport _T_27 = Q_s_a3[_T_26], clock @[Q_table.scala 62:28]
    max4.io.ins3 <= _T_27 @[Q_table.scala 62:15]
    io.Q_prime_max <= max4.io.Q_max @[Q_table.scala 63:17]
    node _T_28 = bits(new_state_or_state, 4, 0) @[Q_table.scala 65:38]
    read mport _T_29 = Q_s_a0[_T_28], clock @[Q_table.scala 65:38]
    index_of_Q_max.io.ins0 <= _T_29 @[Q_table.scala 65:25]
    node _T_30 = bits(new_state_or_state, 4, 0) @[Q_table.scala 66:38]
    read mport _T_31 = Q_s_a0[_T_30], clock @[Q_table.scala 66:38]
    index_of_Q_max.io.ins1 <= _T_31 @[Q_table.scala 66:25]
    node _T_32 = bits(new_state_or_state, 4, 0) @[Q_table.scala 67:38]
    read mport _T_33 = Q_s_a0[_T_32], clock @[Q_table.scala 67:38]
    index_of_Q_max.io.ins2 <= _T_33 @[Q_table.scala 67:25]
    node _T_34 = bits(new_state_or_state, 4, 0) @[Q_table.scala 68:38]
    read mport _T_35 = Q_s_a0[_T_34], clock @[Q_table.scala 68:38]
    index_of_Q_max.io.ins3 <= _T_35 @[Q_table.scala 68:25]
    index_of_Q_max.io.Q_max_at_state_s <= max4.io.Q_max @[Q_table.scala 69:37]
    io.action_at_Qmax <= index_of_Q_max.io.action_at_Qmax @[Q_table.scala 70:20]
    
  module ConfirmReward : 
    input clock : Clock
    input reset : Reset
    output io : {flip new_state : UInt<6>, flip step : UInt<4>, reward : SInt<9>}
    
    node _T = eq(io.new_state, UInt<5>("h018")) @[Blocks.scala 82:20]
    when _T : @[Blocks.scala 82:28]
      io.reward <= asSInt(UInt<8>("h064")) @[Blocks.scala 82:38]
      skip @[Blocks.scala 82:28]
    else : @[Blocks.scala 83:29]
      node _T_1 = eq(io.step, UInt<4>("h0e")) @[Blocks.scala 83:21]
      when _T_1 : @[Blocks.scala 83:29]
        io.reward <= asSInt(UInt<7>("h04e")) @[Blocks.scala 84:14]
        skip @[Blocks.scala 83:29]
      else : @[Blocks.scala 85:192]
        node _T_2 = eq(io.new_state, UInt<3>("h04")) @[Blocks.scala 85:26]
        node _T_3 = eq(io.new_state, UInt<3>("h06")) @[Blocks.scala 85:48]
        node _T_4 = or(_T_2, _T_3) @[Blocks.scala 85:33]
        node _T_5 = eq(io.new_state, UInt<3>("h07")) @[Blocks.scala 85:69]
        node _T_6 = or(_T_4, _T_5) @[Blocks.scala 85:55]
        node _T_7 = eq(io.new_state, UInt<4>("h0d")) @[Blocks.scala 85:91]
        node _T_8 = or(_T_6, _T_7) @[Blocks.scala 85:76]
        node _T_9 = eq(io.new_state, UInt<5>("h010")) @[Blocks.scala 85:114]
        node _T_10 = or(_T_8, _T_9) @[Blocks.scala 85:99]
        node _T_11 = eq(io.new_state, UInt<5>("h012")) @[Blocks.scala 85:137]
        node _T_12 = or(_T_10, _T_11) @[Blocks.scala 85:122]
        node _T_13 = eq(io.new_state, UInt<5>("h013")) @[Blocks.scala 85:160]
        node _T_14 = or(_T_12, _T_13) @[Blocks.scala 85:145]
        node _T_15 = eq(io.new_state, UInt<5>("h015")) @[Blocks.scala 85:183]
        node _T_16 = or(_T_14, _T_15) @[Blocks.scala 85:168]
        when _T_16 : @[Blocks.scala 85:192]
          io.reward <= asSInt(UInt<9>("h0138")) @[Blocks.scala 85:203]
          skip @[Blocks.scala 85:192]
        else : @[Blocks.scala 86:14]
          io.reward <= asSInt(UInt<1>("h00")) @[Blocks.scala 87:14]
          skip @[Blocks.scala 86:14]
    
  module resetFMS : 
    input clock : Clock
    input reset : Reset
    output io : {flip transition : UInt<1>, reset : UInt<1>}
    
    reg active_reset_fms : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AgentsBrain.scala 9:31]
    io.reset <= UInt<1>("h00") @[AgentsBrain.scala 10:11]
    when io.transition : @[AgentsBrain.scala 11:22]
      active_reset_fms <= UInt<1>("h00") @[AgentsBrain.scala 12:21]
      skip @[AgentsBrain.scala 11:22]
    node _T = eq(UInt<1>("h00"), active_reset_fms) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      active_reset_fms <= UInt<1>("h01") @[AgentsBrain.scala 16:23]
      io.reset <= UInt<1>("h01") @[AgentsBrain.scala 17:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), active_reset_fms) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        skip @[Conditional.scala 39:67]
    
  module MasterFMS : 
    input clock : Clock
    input reset : Reset
    output io : {flip iterate : UInt<1>, flip done_learning : UInt<1>, flip move_to_confirming_Reward : UInt<1>, Path_found : UInt<1>, cal : UInt<1>, load_new_state : UInt<1>, reset_Action_fms : UInt<1>, get_Q_prime_max : UInt<1>, generate_rand2 : UInt<1>}
    
    io.Path_found <= UInt<1>("h00") @[AgentsBrain.scala 35:17]
    io.cal <= UInt<1>("h00") @[AgentsBrain.scala 36:9]
    io.get_Q_prime_max <= UInt<1>("h00") @[AgentsBrain.scala 37:21]
    io.load_new_state <= UInt<1>("h00") @[AgentsBrain.scala 38:20]
    io.generate_rand2 <= UInt<1>("h00") @[AgentsBrain.scala 39:20]
    reg master_fms : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AgentsBrain.scala 42:25]
    inst reset_fms of resetFMS @[AgentsBrain.scala 44:23]
    reset_fms.clock <= clock
    reset_fms.reset <= reset
    wire transition : UInt<1>
    transition <= UInt<1>("h00")
    reset_fms.io.transition <= transition @[AgentsBrain.scala 46:26]
    io.reset_Action_fms <= reset_fms.io.reset @[AgentsBrain.scala 47:22]
    io.reset_Action_fms <= UInt<1>("h00") @[AgentsBrain.scala 48:22]
    node _T = eq(UInt<3>("h00"), master_fms) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.iterate : @[AgentsBrain.scala 52:23]
        master_fms <= UInt<3>("h00") @[AgentsBrain.scala 53:20]
        skip @[AgentsBrain.scala 52:23]
      else : @[AgentsBrain.scala 54:35]
        when io.done_learning : @[AgentsBrain.scala 54:35]
          master_fms <= UInt<3>("h04") @[AgentsBrain.scala 55:20]
          skip @[AgentsBrain.scala 54:35]
        else : @[AgentsBrain.scala 56:8]
          transition <= UInt<1>("h01") @[AgentsBrain.scala 57:19]
          master_fms <= UInt<3>("h01") @[AgentsBrain.scala 58:19]
          skip @[AgentsBrain.scala 56:8]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<3>("h01"), master_fms) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.reset_Action_fms <= reset_fms.io.reset @[AgentsBrain.scala 62:26]
        io.generate_rand2 <= reset_fms.io.reset @[AgentsBrain.scala 63:24]
        when io.move_to_confirming_Reward : @[AgentsBrain.scala 64:42]
          master_fms <= UInt<3>("h02") @[AgentsBrain.scala 65:20]
          skip @[AgentsBrain.scala 64:42]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<3>("h02"), master_fms) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          master_fms <= UInt<3>("h03") @[AgentsBrain.scala 69:18]
          io.get_Q_prime_max <= UInt<1>("h01") @[AgentsBrain.scala 70:25]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<3>("h03"), master_fms) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.cal <= UInt<1>("h01") @[AgentsBrain.scala 73:13]
            master_fms <= UInt<3>("h00") @[AgentsBrain.scala 74:17]
            io.load_new_state <= UInt<1>("h01") @[AgentsBrain.scala 75:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), master_fms) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.Path_found <= UInt<1>("h01") @[AgentsBrain.scala 78:20]
              skip @[Conditional.scala 39:67]
    
  module sloving_maze_by_RL : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rand1 : UInt<10>, flip rand2 : UInt<10>, Path_found : UInt<1>, flip COL : UInt<3>, flip ROW : UInt<3>, flip state_read : UInt<6>, flip act_read : UInt<2>, Q_value : SInt<21>, flip write_data_into_a_txtfile : UInt<1>}
    
    inst agent of Agent @[sloving_maze_by_RL.scala 15:19]
    agent.clock <= clock
    agent.reset <= reset
    inst taking_action of takingAction @[sloving_maze_by_RL.scala 16:27]
    taking_action.clock <= clock
    taking_action.reset <= reset
    inst Q_func of Q_function @[sloving_maze_by_RL.scala 17:20]
    Q_func.clock <= clock
    Q_func.reset <= reset
    inst Q_table of Qtable @[sloving_maze_by_RL.scala 18:21]
    Q_table.clock <= clock
    Q_table.reset <= reset
    inst Reward of ConfirmReward @[sloving_maze_by_RL.scala 19:20]
    Reward.clock <= clock
    Reward.reset <= reset
    inst masterFMS of MasterFMS @[sloving_maze_by_RL.scala 20:23]
    masterFMS.clock <= clock
    masterFMS.reset <= reset
    io.Q_value <= Q_table.io.Q_s_a @[sloving_maze_by_RL.scala 21:13]
    Q_table.io.state_read <= io.state_read @[sloving_maze_by_RL.scala 22:24]
    Q_table.io.act_read <= io.act_read @[sloving_maze_by_RL.scala 23:22]
    Q_table.io.write_data_into_a_txtfile <= io.write_data_into_a_txtfile @[sloving_maze_by_RL.scala 24:39]
    agent.io.ROW <= io.ROW @[sloving_maze_by_RL.scala 27:15]
    agent.io.COL <= io.COL @[sloving_maze_by_RL.scala 28:15]
    taking_action.io.rand1 <= io.rand1 @[sloving_maze_by_RL.scala 29:11]
    taking_action.io.rand2 <= io.rand2 @[sloving_maze_by_RL.scala 30:11]
    taking_action.io.x <= agent.io.x @[sloving_maze_by_RL.scala 31:13]
    taking_action.io.y <= agent.io.y @[sloving_maze_by_RL.scala 32:13]
    taking_action.io.episode <= agent.io.episode @[sloving_maze_by_RL.scala 33:19]
    agent.io.new_state <= taking_action.io.new_state @[sloving_maze_by_RL.scala 35:29]
    Q_table.io.new_state <= taking_action.io.new_state @[sloving_maze_by_RL.scala 36:29]
    Q_table.io.act <= taking_action.io.act @[sloving_maze_by_RL.scala 37:23]
    taking_action.io.action_at_Qmax <= Q_table.io.action_at_Qmax @[sloving_maze_by_RL.scala 38:34]
    Reward.io.new_state <= taking_action.io.new_state @[sloving_maze_by_RL.scala 40:22]
    Reward.io.step <= agent.io.step @[sloving_maze_by_RL.scala 41:17]
    Q_table.io.state <= agent.io.state @[sloving_maze_by_RL.scala 43:19]
    Q_func.io.Q_prime_max <= Q_table.io.Q_prime_max @[sloving_maze_by_RL.scala 44:24]
    Q_func.io.Q_s_a <= Q_table.io.Q_s_a @[sloving_maze_by_RL.scala 45:18]
    Q_func.io.reward <= Reward.io.reward @[sloving_maze_by_RL.scala 46:19]
    Q_func.io.cal <= masterFMS.io.cal @[sloving_maze_by_RL.scala 47:16]
    Q_table.io.wrEna <= Q_func.io.wrEna @[sloving_maze_by_RL.scala 48:18]
    Q_table.io.Q_updated <= Q_func.io.Q_updated @[sloving_maze_by_RL.scala 49:22]
    taking_action.io.reset_Action_fms <= masterFMS.io.reset_Action_fms @[sloving_maze_by_RL.scala 52:32]
    masterFMS.io.done_learning <= agent.io.done_learning @[sloving_maze_by_RL.scala 53:29]
    masterFMS.io.iterate <= agent.io.iterate @[sloving_maze_by_RL.scala 54:23]
    masterFMS.io.move_to_confirming_Reward <= taking_action.io.move_to_confirming_Reward @[sloving_maze_by_RL.scala 55:41]
    Q_table.io.get_Q_prime_max <= masterFMS.io.get_Q_prime_max @[sloving_maze_by_RL.scala 56:31]
    agent.io.load_new_state <= masterFMS.io.load_new_state @[sloving_maze_by_RL.scala 57:26]
    io.Path_found <= masterFMS.io.Path_found @[sloving_maze_by_RL.scala 58:16]
    
