[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(C:\Users\leduc\waveform\src\main\scala\Vu.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(C:\Users\leduc\waveform\src\main\scala\sloving_maze_by_RL.scala, C:\Users\leduc\waveform\src\main\scala\Q_table.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\leduc\waveform\src\main\scala\ActionBlock.scala, C:\Users\leduc\waveform\src\main\scala\draft.scala, C:\Users\leduc\waveform\src\main\scala\Action_State.scala, C:\Users\leduc\waveform\src\main\scala\Routing.scala, C:\Users\leduc\waveform\src\main\scala\Blocks.scala, C:\Users\leduc\waveform\src\main\scala\Block123.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(C:\Users\leduc\waveform\target\scala-2.11\classes\Q_function$$anonfun$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Rem.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$5$$anonfun$apply$mcV$sp$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$1$$anonfun$apply$mcV$sp$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_function$$anonfun$18.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$5$$anonfun$apply$mcV$sp$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$$anonfun$1$$anonfun$apply$mcVI$sp$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action1$$anonfun$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$20.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$1$$anonfun$apply$mcV$sp$16.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$2$$anonfun$apply$mcV$sp$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$21.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_functiontester$$anonfun$19.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$12.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$12.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action1$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$17.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anon$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action1$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$22.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$13$$anonfun$apply$mcV$sp$14.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$1$$anonfun$apply$mcV$sp$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_functiontester$$anonfun$20.class, C:\Users\leduc\waveform\target\scala-2.11\classes\RemTester$$anonfun$14.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$1$$anonfun$apply$mcV$sp$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action1$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$18.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\RemTester$delayedInit$body.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Max4Trial$$anonfun$12.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$18.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$19.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$15.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$2$$anonfun$apply$mcV$sp$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$5$$anonfun$apply$mcV$sp$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$delayedInit$body.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$15.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anon$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$2$$anonfun$apply$mcV$sp$13.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$13$$anonfun$apply$mcV$sp$28.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$19.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$6$$anonfun$apply$mcV$sp$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$4$$anonfun$apply$mcV$sp$17.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$23.class, C:\Users\leduc\waveform\target\scala-2.11\classes\WireTester.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$3$$anonfun$apply$mcV$sp$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$26.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_function$$anon$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anonfun$14.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$13$$anonfun$apply$mcV$sp$15.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\WireTester$$anonfun$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\WireTester$$anonfun$6.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_functiontester$.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$6$$anonfun$apply$mcV$sp$12.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123$$anonfun$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\RemTester$$anonfun$13.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_functiontester$delayedInit$body.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$$anonfun$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Max4Trial.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Max4Trial$$anonfun$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess$$anon$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$24.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$10.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Rem$$anon$2.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$14.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$17.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$delayedInit$body.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$4$$anonfun$apply$mcV$sp$16.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anon$1.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_function.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_functiontester.class, C:\Users\leduc\waveform\target\scala-2.11\classes\IterateTheLearningProcess.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$4.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Block123Tester$$anonfun$5.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$12.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ConfirmReward$$anonfun$16.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Max4Trial$$anon$3.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionTester1$$anonfun$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$27.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8$$anonfun$apply$mcV$sp$25.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Q_function$$anonfun$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$13.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action.class, C:\Users\leduc\waveform\target\scala-2.11\classes\AgentsLocation$$anonfun$13.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable$$anonfun$11.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$5$$anonfun$apply$mcV$sp$7.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$13.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\RemTester.class, C:\Users\leduc\waveform\target\scala-2.11\classes\ActionBlock$$anonfun$6$$anonfun$apply$mcV$sp$20.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Action$$anonfun$8.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Qtable.class, C:\Users\leduc\waveform\target\scala-2.11\classes\Routing$$anonfun$9.class, C:\Users\leduc\waveform\target\scala-2.11\classes\RemTester$.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(Rem, Block123Tester, Routing, Block123, IterateTheLearningProcess, Q_functiontester, Q_function, Action1, ConfirmReward, WireTester, RemTester, Qtable, ActionBlock, ActionTester1, Max4Trial, AgentsLocation, Action)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(C:\Users\leduc\waveform\src\main\scala\ActionBlock.scala, C:\Users\leduc\waveform\src\main\scala\Vu.scala, C:\Users\leduc\waveform\src\main\scala\draft.scala, C:\Users\leduc\waveform\src\main\scala\Routing.scala, C:\Users\leduc\waveform\src\main\scala\Blocks.scala, C:\Users\leduc\waveform\src\main\scala\Block123.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(Rem, Block123Tester, Routing, Block123, IterateTheLearningProcess, Q_functiontester, Q_function, Action1, ConfirmReward, WireTester, RemTester, Qtable, ActionBlock, ActionTester1, Max4Trial, AgentsLocation, Action)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\leduc\waveform\src\main\scala\ActionBlock.scala, C:\Users\leduc\waveform\src\main\scala\Vu.scala, C:\Users\leduc\waveform\src\main\scala\draft.scala, C:\Users\leduc\waveform\src\main\scala\Action_State.scala, C:\Users\leduc\waveform\src\main\scala\Q_table.scala, C:\Users\leduc\waveform\src\main\scala\Routing.scala, C:\Users\leduc\waveform\src\main\scala\Blocks.scala, C:\Users\leduc\waveform\src\main\scala\sloving_maze_by_RL.scala, C:\Users\leduc\waveform\src\main\scala\Block123.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Rem, Block123Tester, Routing, Block123, IterateTheLearningProcess, Q_functiontester, Q_function, Action1, ConfirmReward, WireTester, RemTester, Qtable, ActionBlock, ActionTester1, Max4Trial, AgentsLocation, Action[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 10 Scala sources to C:\Users\leduc\waveform\target\scala-2.11\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.3.5:compile for Scala 2.11.7[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.3.5:compile for Scala 2.11.7[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 411c6662 for Scala compiler version 2.11.7[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\resources.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\rt.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\sunrsasign.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\jsse.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\jce.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\charsets.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\lib\jfr.jar;C:\Program Files\AdoptOpenJDK\jdk-8.0.265.01-hotspot\jre\classes;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.11.7\scala-library-2.11.7.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\leduc\waveform\target\scala-2.11\classes;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\edu\berkeley\cs\chisel3_2.11\3.2.2\chisel3_2.11-3.2.2.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\edu\berkeley\cs\chisel-iotesters_2.11\1.3.2\chisel-iotesters_2.11-1.3.2.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-reflect\2.11.7\scala-reflect-2.11.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\github\scopt\scopt_2.11\3.7.1\scopt_2.11-3.7.1.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\edu\berkeley\cs\firrtl_2.11\1.2.2\firrtl_2.11-1.2.2.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\edu\berkeley\cs\firrtl-interpreter_2.11\1.2.2\firrtl-interpreter_2.11-1.2.2.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\edu\berkeley\cs\treadle_2.11\1.1.2\treadle_2.11-1.1.2.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\junit\junit\4.12\junit-4.12.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest_2.11\3.0.8\scalatest_2.11-3.0.8.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalacheck\scalacheck_2.11\1.14.0\scalacheck_2.11-1.14.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\antlr\antlr4-runtime\4.7.1\antlr4-runtime-4.7.1.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\google\protobuf\protobuf-java\3.4.0\protobuf-java-3.4.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\scala-logging\scala-logging_2.11\3.9.0\scala-logging_2.11-3.9.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\net\jcazevedo\moultingyaml_2.11\0.4.1\moultingyaml_2.11-0.4.1.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\json4s\json4s-native_2.11\3.6.7\json4s-native_2.11-3.6.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\apache\commons\commons-text\1.7\commons-text-1.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-jline\2.12.1\scala-jline-2.12.1.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalactic\scalactic_2.11\3.0.8\scalactic_2.11-3.0.8.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-xml_2.11\1.2.0\scala-xml_2.11-1.2.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\test-interface\1.0\test-interface-1.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\github\nscala-time\nscala-time_2.11\2.22.0\nscala-time_2.11-2.22.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\yaml\snakeyaml\1.24\snakeyaml-1.24.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\json4s\json4s-core_2.11\3.6.7\json4s-core_2.11-3.6.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\apache\commons\commons-lang3\3.9\commons-lang3-3.9.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\fusesource\jansi\jansi\1.11\jansi-1.11.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\joda-time\joda-time\2.10.1\joda-time-2.10.1.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\joda\joda-convert\2.2.0\joda-convert-2.2.0.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\json4s\json4s-ast_2.11\3.6.7\json4s-ast_2.11-3.6.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\json4s\json4s-scalap_2.11\3.6.7\json4s-scalap_2.11-3.6.7.jar;C:\Users\leduc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\thoughtworks\paranamer\paranamer\2.8\paranamer-2.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 9.9109481 s[0m
[0m[[0m[0mdebug[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from IterateTheLearningProcess...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: IterateTheLearningProcess[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(IterateTheLearningProcess)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Agents_knowledge: Set(UsedName(io,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(IterateTheLearningProcess,ModifiedNames(changes = UsedName(io,[Default]), UsedName(counter,[Default]), UsedName(step,[Default]), UsedName(start_again,[Default]))) invalidates 2 classes due to The IterateTheLearningProcess has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(io,[Default]), UsedName(counter,[Default]), UsedName(step,[Default]), UsedName(start_again,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(IterateTheLearningProcess)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(Agents_knowledge)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Max4Trial...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Max4Trial[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Max4Trial)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Max4Trial,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(Max4Trial,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(Max4Trial;init;,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(ins,[Default]), UsedName(_namespace,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The Max4Trial has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(Max4Trial,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(Max4Trial;init;,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(ins,[Default]), UsedName(_namespace,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Max4Trial)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Agents_knowledge...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Agents_knowledge[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Agents_knowledge)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Solving_maze_by_RL: Set(UsedName(isInstanceOf,[Default]), UsedName(==,[Default]), UsedName(Agents_knowledge;init;,[Default]), UsedName(io,[Default]), UsedName(IO,[Default]), UsedName(asInstanceOf,[Default]), UsedName(x,[Default]), UsedName(state,[Default]), UsedName(Agents_knowledge,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Agents_knowledge,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(ROW,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(iterate,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(Agents_knowledge;init;,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(COL,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(iterateTheLearningProcess,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName(done_learning,[Default]), UsedName($asInstanceOf,[Default]), UsedName(agentsLocation,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(Agents_knowledge,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]))) invalidates 2 classes due to The Agents_knowledge has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(ROW,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(iterate,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(Agents_knowledge;init;,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(COL,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(iterateTheLearningProcess,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName(done_learning,[Default]), UsedName($asInstanceOf,[Default]), UsedName(agentsLocation,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(Agents_knowledge,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Agents_knowledge)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(Solving_maze_by_RL)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Action...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Action[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Action)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Solving_maze_by_RL: Set(UsedName(io,[Default]), UsedName(x,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Action,ModifiedNames(changes = UsedName(get,[Default]), UsedName(enable3,[Default]), UsedName(enable1,[Default]), UsedName(checking,[Default]), UsedName(enable2,[Default]), UsedName(y,[Default]), UsedName(x_y_new,[Default]), UsedName(move_to_Q_function,[Default]), UsedName(action_from_Q,[Default]), UsedName(iterate,[Default]), UsedName(reset,[Default]), UsedName(random_Action,[Default]), UsedName(sel,[Default]), UsedName(new_state,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(stateReg,[Default]), UsedName(generate,[Default]), UsedName(start,[Default]), UsedName(action_with_greatest_Qval,[Default]), UsedName(x,[Default]), UsedName(out,[Default]), UsedName(Q_max,[Default]))) invalidates 2 classes due to The Action has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(get,[Default]), UsedName(enable3,[Default]), UsedName(enable1,[Default]), UsedName(checking,[Default]), UsedName(enable2,[Default]), UsedName(y,[Default]), UsedName(x_y_new,[Default]), UsedName(move_to_Q_function,[Default]), UsedName(action_from_Q,[Default]), UsedName(iterate,[Default]), UsedName(reset,[Default]), UsedName(random_Action,[Default]), UsedName(sel,[Default]), UsedName(new_state,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(stateReg,[Default]), UsedName(generate,[Default]), UsedName(start,[Default]), UsedName(action_with_greatest_Qval,[Default]), UsedName(x,[Default]), UsedName(out,[Default]), UsedName(Q_max,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Action)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(Solving_maze_by_RL)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Block123...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Block123[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Block123)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Block123,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(ROW,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(Block123,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(Block123;init;,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(confirmReward,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(done,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(COL,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(iterateTheLearningProcess,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(agentsLocation,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(reward,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The Block123 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(ROW,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(Block123,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(Block123;init;,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(confirmReward,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(done,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(COL,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(iterateTheLearningProcess,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(agentsLocation,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(reward,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Block123)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Qtable...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Qtable[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Qtable)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Solving_maze_by_RL: Set(UsedName(io,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Qtable,ModifiedNames(changes = UsedName(get,[Default]), UsedName(Q_Action1,[Default]), UsedName(Q_Action3,[Default]), UsedName(move_to_Q_function,[Default]), UsedName(Q_Action0,[Default]), UsedName(Q_Action2,[Default]), UsedName(sel,[Default]), UsedName(addr,[Default]), UsedName(io,[Default]), UsedName(QTable,[Default]), UsedName(ins1,[Default]))) invalidates 2 classes due to The Qtable has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(get,[Default]), UsedName(Q_Action1,[Default]), UsedName(Q_Action3,[Default]), UsedName(move_to_Q_function,[Default]), UsedName(Q_Action0,[Default]), UsedName(Q_Action2,[Default]), UsedName(sel,[Default]), UsedName(addr,[Default]), UsedName(io,[Default]), UsedName(QTable,[Default]), UsedName(ins1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Qtable)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(Solving_maze_by_RL)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Q_functiontester...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Q_functiontester[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Q_functiontester)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Q_functiontester,ModifiedNames(changes = UsedName(longToUnsignedBigInt,[Default]), UsedName(expect$default$3,[Default]), UsedName(expectFixedPoint$default$4,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(incTime,[Default]), UsedName(peek,[Default]), UsedName(notifyAll,[Default]), UsedName(longToInt,[Implicit]), UsedName(expect,[Default]), UsedName(expectFixedPoint,[Default]), UsedName(peekFixedPoint,[Default]), UsedName(int,[Implicit]), UsedName(peekAt,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(pokeAt,[Default]), UsedName(println$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(dut,[Default]), UsedName(delayedInit,[Default]), UsedName(isInstanceOf,[Default]), UsedName(t,[Default]), UsedName($init$,[Default]), UsedName(executionStart,[Default]), UsedName(args,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(println,[Default]), UsedName(reset,[Default]), UsedName(fail,[Default]), UsedName(_verbose,[Implicit]), UsedName(optionsManager,[Default]), UsedName(pokeFixedPoint,[Default]), UsedName(backend,[Default]), UsedName(logger,[Implicit]), UsedName(notify,[Default]), UsedName(step,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intToUnsignedBigInt,[Default]), UsedName(Q_functiontester;init;,[Default]), UsedName(finish,[Default]), UsedName(Q_functiontester,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(rnd,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(reset$default$1,[Default]), UsedName(_base,[Implicit]), UsedName(poke,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The Q_functiontester has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(longToInt,[Implicit]), UsedName(int,[Implicit]), UsedName(_verbose,[Implicit]), UsedName(logger,[Implicit]), UsedName(_base,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Q_functiontester)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Action1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Action1[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Action1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Action1,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(enable1,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(Action1,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(Action1;init;,[Default]), UsedName(epsilon,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The Action1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(enable1,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(episode,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(Action1,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(Action1;init;,[Default]), UsedName(epsilon,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Action1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ActionBlock...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: ActionBlock[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ActionBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ActionBlock,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(checking,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(rand1,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(x_y_new,[Default]), UsedName(action_from_Q,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(y_new,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(random_Action,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(sel,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(x_new,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(stateReg,[Default]), UsedName(ActionBlock;init;,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(start,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(epsilon,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(ActionBlock,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName(rand2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(act,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]), UsedName(Q_max,[Default]))) invalidates 1 classes due to The ActionBlock has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(checking,[Default]), UsedName(compileOptions,[Default]), UsedName(y,[Default]), UsedName(episode,[Default]), UsedName(rand1,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(x_y_new,[Default]), UsedName(action_from_Q,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(y_new,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(random_Action,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(sel,[Default]), UsedName(new_state,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(x_new,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(index,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(stateReg,[Default]), UsedName(ActionBlock;init;,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(start,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(x,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(epsilon,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(ActionBlock,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName(rand2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(out,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(act,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]), UsedName(Q_max,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ActionBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Block123_waveform...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Block123_waveform[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Block123_waveform)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Block123_waveform,ModifiedNames(changes = UsedName(registerIgnoredTest,[Default]), UsedName(<=,[Default]), UsedName(ItWord,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(length,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(they,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(behave,[Default]), UsedName(assertTypeError,[Default]), UsedName(runNestedSuites,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(endWith,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(notifyAll,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(IgnoreVerbString,[Default]), UsedName(include,[Default]), UsedName(have,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(only,[Default]), UsedName(RegexWord,[Default]), UsedName(info,[Default]), UsedName(BehaviorWord,[Default]), UsedName(suiteId,[Default]), UsedName(styleName,[Default]), UsedName(markup,[Default]), UsedName(behavior,[Default]), UsedName(between,[Default]), UsedName(after,[Default]), UsedName(note,[Default]), UsedName(regex,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(noException,[Default]), UsedName(withClue,[Default]), UsedName(withFixture,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(hashCode,[Default]), UsedName(assertionsHelper,[Default]), UsedName(assertCompiles,[Default]), UsedName(synchronized,[Default]), UsedName(!==,[Default]), UsedName(thrownBy,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(doCollected,[Default]), UsedName($isInstanceOf,[Default]), UsedName(size,[Default]), UsedName(oneElementOf,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(key,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(execute,[Default]), UsedName(run,[Default]), UsedName(decided,[Default]), UsedName(cancel,[Default]), UsedName(be,[Default]), UsedName(succeed,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(runTest,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(DeterminedWord,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(isInstanceOf,[Default]), UsedName(it,[Default]), UsedName(ignore,[Default]), UsedName(expectedTestCount,[Default]), UsedName(execute$default$4,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName($init$,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(execute$default$7,[Default]), UsedName(testDataFor,[Default]), UsedName(all,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(empty,[Default]), UsedName(suiteName,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(noneOf,[Default]), UsedName(execute$default$3,[Default]), UsedName(contain,[Default]), UsedName(wait,[Default]), UsedName(message,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(oneOf,[Default]), UsedName(pending,[Default]), UsedName(readable,[Default]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(Block123_waveform;init;,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(<,[Default]), UsedName(allElementsOf,[Default]), UsedName(alert,[Default]), UsedName(testNames,[Default]), UsedName(value,[Default]), UsedName(not,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(defined,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(execute$default$2,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(inOrder,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(TheAfterWord,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(execute$default$6,[Default]), UsedName(AnWord,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(allOf,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(equal,[Default]), UsedName(matchPattern,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(notify,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(clone,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(AWord,[Default]), UsedName(exist,[Default]), UsedName(NoArgTest,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(nestedSuites,[Default]), UsedName(intercept,[Default]), UsedName(ne,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(atMostOneOf,[Default]), UsedName(rerunner,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(assertThrows,[Default]), UsedName(registerTest,[Default]), UsedName(compile,[Default]), UsedName(IgnoreWord,[Default]), UsedName(===,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(defaultEquality,[Default]), UsedName(assertResult,[Default]), UsedName(TheyVerbString,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(assume,[Default]), UsedName(Equalizer,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(fullyMatch,[Default]), UsedName(atLeast,[Default]), UsedName(>,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(trap,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(startWith,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(execute$default$5,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(execute$default$1,[Default]), UsedName(typeCheck,[Default]), UsedName(a,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(finalize,[Default]), UsedName(Block123_waveform,[Default]), UsedName(noElementsOf,[Default]), UsedName(>=,[Default]), UsedName(definedAt,[Default]), UsedName(inOrderOnly,[Default]), UsedName($asInstanceOf,[Default]), UsedName(of,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(DecidedWord,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(an,[Default]), UsedName(atMost,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(toString,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(eq,[Default]), UsedName(no,[Default]), UsedName(the,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(ItVerbString,[Default]), UsedName(determined,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(runTests,[Default]), UsedName(KeyWord,[Default]), UsedName(exactly,[Default]), UsedName(getClass,[Default]), UsedName(ValueWord,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(assert,[Default]))) invalidates 1 classes due to The Block123_waveform has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Block123_waveform)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ActionTester1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: ActionTester1[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ActionTester1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ActionTester1,ModifiedNames(changes = UsedName(longToUnsignedBigInt,[Default]), UsedName(expect$default$3,[Default]), UsedName(expectFixedPoint$default$4,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(incTime,[Default]), UsedName(peek,[Default]), UsedName(notifyAll,[Default]), UsedName(longToInt,[Implicit]), UsedName(expect,[Default]), UsedName(expectFixedPoint,[Default]), UsedName(peekFixedPoint,[Default]), UsedName(int,[Implicit]), UsedName(peekAt,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(pokeAt,[Default]), UsedName(println$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(dut,[Default]), UsedName(delayedInit,[Default]), UsedName(isInstanceOf,[Default]), UsedName(t,[Default]), UsedName($init$,[Default]), UsedName(executionStart,[Default]), UsedName(args,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(println,[Default]), UsedName(reset,[Default]), UsedName(fail,[Default]), UsedName(_verbose,[Implicit]), UsedName(optionsManager,[Default]), UsedName(pokeFixedPoint,[Default]), UsedName(backend,[Default]), UsedName(logger,[Implicit]), UsedName(notify,[Default]), UsedName(step,[Default]), UsedName(clone,[Default]), UsedName(ActionTester1,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intToUnsignedBigInt,[Default]), UsedName(finish,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(rnd,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(reset$default$1,[Default]), UsedName(_base,[Implicit]), UsedName(poke,[Default]), UsedName(ActionTester1;init;,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The ActionTester1 has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(longToInt,[Implicit]), UsedName(int,[Implicit]), UsedName(_verbose,[Implicit]), UsedName(logger,[Implicit]), UsedName(_base,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ActionTester1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Q_function...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Q_function[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Q_function)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of Solving_maze_by_RL. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Q_function,ModifiedNames(changes = UsedName(reward,[Default]))) invalidates 1 classes due to The Q_function has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(reward,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Q_function)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from WireTester...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: WireTester[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(WireTester)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(WireTester,ModifiedNames(changes = UsedName(longToUnsignedBigInt,[Default]), UsedName(expect$default$3,[Default]), UsedName(expectFixedPoint$default$4,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(incTime,[Default]), UsedName(peek,[Default]), UsedName(notifyAll,[Default]), UsedName(longToInt,[Implicit]), UsedName(expect,[Default]), UsedName(expectFixedPoint,[Default]), UsedName(peekFixedPoint,[Default]), UsedName(int,[Implicit]), UsedName(peekAt,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(pokeAt,[Default]), UsedName(println$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(dut,[Default]), UsedName(isInstanceOf,[Default]), UsedName(t,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(println,[Default]), UsedName(reset,[Default]), UsedName(fail,[Default]), UsedName(WireTester;init;,[Default]), UsedName(_verbose,[Implicit]), UsedName(optionsManager,[Default]), UsedName(pokeFixedPoint,[Default]), UsedName(backend,[Default]), UsedName(ins,[Default]), UsedName(logger,[Implicit]), UsedName(notify,[Default]), UsedName(step,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intToUnsignedBigInt,[Default]), UsedName(finish,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(rnd,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(reset$default$1,[Default]), UsedName(_base,[Implicit]), UsedName(poke,[Default]), UsedName(WireTester,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The WireTester has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(longToInt,[Implicit]), UsedName(int,[Implicit]), UsedName(_verbose,[Implicit]), UsedName(logger,[Implicit]), UsedName(_base,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(WireTester)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Solving_maze_by_RL...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Solving_maze_by_RL[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Solving_maze_by_RL)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Solving_maze_by_RL,ModifiedNames(changes = UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(path,[Default]), UsedName(notifyAll,[Default]), UsedName(location,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(rand1,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(Q_func,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(Solving_maze_by_RL;init;,[Default]), UsedName(compute_Q_value,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(choosing_Action,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(action,[Default]), UsedName(block123,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(Solving_maze_by_RL,[Default]), UsedName(update_Q,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(Q_table,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]), UsedName(routing,[Default]))) invalidates 1 classes due to The Solving_maze_by_RL has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setRef,[Default]), UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(path,[Default]), UsedName(notifyAll,[Default]), UsedName(location,[Default]), UsedName(getCommands,[Default]), UsedName(getPorts,[Default]), UsedName(circuitName,[Default]), UsedName(desiredName,[Default]), UsedName(compileOptions,[Default]), UsedName(rand1,[Default]), UsedName(bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(getModulePorts,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(Q_func,[Default]), UsedName(_onModuleClose,[Default]), UsedName(namePorts,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isClosed,[Default]), UsedName(suggestName,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(parentModName,[Default]), UsedName(portsSize,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(override_reset,[Default]), UsedName(reset,[Default]), UsedName(Solving_maze_by_RL;init;,[Default]), UsedName(compute_Q_value,[Default]), UsedName(portsContains,[Default]), UsedName(_component,[Default]), UsedName(forceName,[Default]), UsedName(toNamed,[Default]), UsedName(generateComponent,[Default]), UsedName(toTarget,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(_namespace,[Default]), UsedName(choosing_Action,[Default]), UsedName(io,[Default]), UsedName(_parent,[Default]), UsedName(nameIds,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(getOptionRef,[Default]), UsedName(_id,[Default]), UsedName(addId,[Default]), UsedName(IO,[Default]), UsedName(clock,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(action,[Default]), UsedName(block123,[Default]), UsedName(_closed,[Default]), UsedName(initializeInParent,[Default]), UsedName(override_clock,[Default]), UsedName(parentPathName,[Default]), UsedName(addPostnameHook,[Default]), UsedName(getChiselPorts,[Default]), UsedName(Solving_maze_by_RL,[Default]), UsedName(update_Q,[Default]), UsedName(state,[Default]), UsedName(finalize,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(addCommand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pathName,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getPublicFields,[Default]), UsedName(Q_table,[Default]), UsedName(suggestedName,[Default]), UsedName(getIds,[Default]), UsedName(toAbsoluteTarget,[Default]), UsedName(instanceName,[Default]), UsedName(getRef,[Default]), UsedName(getClass,[Default]), UsedName(routing,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Solving_maze_by_RL)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from AgentsLocation...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: AgentsLocation[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(AgentsLocation)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Agents_knowledge: Set(UsedName(io,[Default]), UsedName(done_learning,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(AgentsLocation,ModifiedNames(changes = UsedName(lut_x,[Default]), UsedName(reset_Action,[Default]), UsedName(done,[Default]), UsedName(io,[Default]), UsedName(LUT_x,[Default]), UsedName(done_learning,[Default]))) invalidates 2 classes due to The AgentsLocation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(lut_x,[Default]), UsedName(reset_Action,[Default]), UsedName(done,[Default]), UsedName(io,[Default]), UsedName(LUT_x,[Default]), UsedName(done_learning,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(AgentsLocation)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(Agents_knowledge)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ConfirmReward...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: ConfirmReward[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ConfirmReward)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ConfirmReward,ModifiedNames(changes = UsedName(reward,[Default]), UsedName(state,[Default]), UsedName(io,[Default]), UsedName(new_state,[Default]))) invalidates 1 classes due to The ConfirmReward has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(reward,[Default]), UsedName(state,[Default]), UsedName(io,[Default]), UsedName(new_state,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ConfirmReward)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from RemTester...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: RemTester[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(RemTester)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(RemTester,ModifiedNames(changes = UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(RemTester,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName($isInstanceOf,[Default]), UsedName(delayedInit,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(executionStart,[Default]), UsedName(args,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]))) invalidates 1 classes due to The RemTester has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(RemTester,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName($isInstanceOf,[Default]), UsedName(delayedInit,[Default]), UsedName(isInstanceOf,[Default]), UsedName($init$,[Default]), UsedName(executionStart,[Default]), UsedName(args,[Default]), UsedName(wait,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(RemTester)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from Block123Tester...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Block123Tester[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(Block123Tester)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(Block123Tester,ModifiedNames(changes = UsedName(Block123Tester,[Default]), UsedName(dut,[Default]), UsedName(Block123Tester;init;,[Default]))) invalidates 1 classes due to The Block123Tester has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Block123Tester,[Default]), UsedName(dut,[Default]), UsedName(Block123Tester;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(Block123Tester)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
