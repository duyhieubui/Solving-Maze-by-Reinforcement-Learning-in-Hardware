;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit takingAction : 
  module Action_FMS : 
    input clock : Clock
    input reset : Reset
    output io : {flip reset_Action_fms : UInt<1>, flip exploit : UInt<1>, flip validAction : UInt<1>, move_to_confirming_Reward : UInt<1>}
    
    reg action_FMS : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 14:27]
    io.move_to_confirming_Reward <= UInt<1>("h00") @[Action and ActionFMS.scala 15:32]
    when io.reset_Action_fms : @[Action and ActionFMS.scala 16:29]
      action_FMS <= UInt<3>("h00") @[Action and ActionFMS.scala 17:16]
      skip @[Action and ActionFMS.scala 16:29]
    else : @[Action and ActionFMS.scala 18:5]
      node _T = eq(UInt<3>("h00"), action_FMS) @[Conditional.scala 37:30]
      when _T : @[Conditional.scala 40:58]
        when io.exploit : @[Action and ActionFMS.scala 21:25]
          action_FMS <= UInt<3>("h01") @[Action and ActionFMS.scala 22:22]
          skip @[Action and ActionFMS.scala 21:25]
        else : @[Action and ActionFMS.scala 23:10]
          action_FMS <= UInt<3>("h02") @[Action and ActionFMS.scala 24:22]
          skip @[Action and ActionFMS.scala 23:10]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_1 = eq(UInt<3>("h01"), action_FMS) @[Conditional.scala 37:30]
        when _T_1 : @[Conditional.scala 39:67]
          action_FMS <= UInt<3>("h03") @[Action and ActionFMS.scala 28:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_2 = eq(UInt<3>("h02"), action_FMS) @[Conditional.scala 37:30]
          when _T_2 : @[Conditional.scala 39:67]
            action_FMS <= UInt<3>("h03") @[Action and ActionFMS.scala 31:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_3 = eq(UInt<3>("h03"), action_FMS) @[Conditional.scala 37:30]
            when _T_3 : @[Conditional.scala 39:67]
              action_FMS <= UInt<3>("h04") @[Action and ActionFMS.scala 34:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_4 = eq(UInt<3>("h04"), action_FMS) @[Conditional.scala 37:30]
              when _T_4 : @[Conditional.scala 39:67]
                when io.validAction : @[Action and ActionFMS.scala 37:29]
                  io.move_to_confirming_Reward <= UInt<1>("h01") @[Action and ActionFMS.scala 38:40]
                  action_FMS <= UInt<3>("h04") @[Action and ActionFMS.scala 39:22]
                  skip @[Action and ActionFMS.scala 37:29]
                else : @[Action and ActionFMS.scala 40:10]
                  action_FMS <= UInt<3>("h00") @[Action and ActionFMS.scala 41:22]
                  skip @[Action and ActionFMS.scala 40:10]
                skip @[Conditional.scala 39:67]
      skip @[Action and ActionFMS.scala 18:5]
    
  module Action : 
    input clock : Clock
    input reset : Reset
    output io : {flip x : UInt<3>, flip y : UInt<3>, flip rand2 : UInt<10>, new_state : UInt<6>, act : UInt<2>, flip action_at_Qmax : UInt<2>, flip exploit : UInt<1>, validAction : UInt<1>}
    
    reg act : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action and ActionFMS.scala 58:20]
    reg x_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 59:22]
    reg y_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action and ActionFMS.scala 60:22]
    reg new_state : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Action and ActionFMS.scala 61:24]
    reg action_at_Qmax : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action and ActionFMS.scala 62:29]
    action_at_Qmax <= io.action_at_Qmax @[Action and ActionFMS.scala 64:17]
    when io.exploit : @[Action and ActionFMS.scala 65:19]
      act <= action_at_Qmax @[Action and ActionFMS.scala 66:8]
      skip @[Action and ActionFMS.scala 65:19]
    else : @[Action and ActionFMS.scala 67:4]
      node _T = leq(io.rand2, UInt<8>("h0fa")) @[Action and ActionFMS.scala 68:19]
      when _T : @[Action and ActionFMS.scala 68:29]
        act <= UInt<1>("h00") @[Action and ActionFMS.scala 69:11]
        skip @[Action and ActionFMS.scala 68:29]
      else : @[Action and ActionFMS.scala 70:70]
        node _T_1 = lt(UInt<8>("h0fa"), io.rand2) @[Action and ActionFMS.scala 70:23]
        node _T_2 = leq(io.rand2, UInt<9>("h01f4")) @[Action and ActionFMS.scala 70:48]
        node _T_3 = eq(_T_2, UInt<1>("h01")) @[Action and ActionFMS.scala 70:58]
        node _T_4 = and(_T_1, _T_3) @[Action and ActionFMS.scala 70:35]
        when _T_4 : @[Action and ActionFMS.scala 70:70]
          act <= UInt<1>("h01") @[Action and ActionFMS.scala 71:11]
          skip @[Action and ActionFMS.scala 70:70]
        else : @[Action and ActionFMS.scala 72:70]
          node _T_5 = lt(UInt<9>("h01f4"), io.rand2) @[Action and ActionFMS.scala 72:23]
          node _T_6 = leq(io.rand2, UInt<10>("h02ee")) @[Action and ActionFMS.scala 72:48]
          node _T_7 = eq(_T_6, UInt<1>("h01")) @[Action and ActionFMS.scala 72:58]
          node _T_8 = and(_T_5, _T_7) @[Action and ActionFMS.scala 72:35]
          when _T_8 : @[Action and ActionFMS.scala 72:70]
            act <= UInt<2>("h02") @[Action and ActionFMS.scala 73:11]
            skip @[Action and ActionFMS.scala 72:70]
          else : @[Action and ActionFMS.scala 74:7]
            act <= UInt<2>("h03") @[Action and ActionFMS.scala 75:11]
            skip @[Action and ActionFMS.scala 74:7]
      skip @[Action and ActionFMS.scala 67:4]
    node _T_9 = eq(act, UInt<1>("h00")) @[Action and ActionFMS.scala 78:12]
    when _T_9 : @[Action and ActionFMS.scala 78:21]
      node _T_10 = add(io.y, UInt<1>("h01")) @[Action and ActionFMS.scala 79:19]
      node _T_11 = tail(_T_10, 1) @[Action and ActionFMS.scala 79:19]
      y_new <= _T_11 @[Action and ActionFMS.scala 79:11]
      x_new <= io.x @[Action and ActionFMS.scala 80:11]
      skip @[Action and ActionFMS.scala 78:21]
    else : @[Action and ActionFMS.scala 81:27]
      node _T_12 = eq(act, UInt<1>("h01")) @[Action and ActionFMS.scala 81:18]
      when _T_12 : @[Action and ActionFMS.scala 81:27]
        node _T_13 = sub(io.x, UInt<1>("h01")) @[Action and ActionFMS.scala 82:19]
        node _T_14 = tail(_T_13, 1) @[Action and ActionFMS.scala 82:19]
        x_new <= _T_14 @[Action and ActionFMS.scala 82:11]
        y_new <= io.y @[Action and ActionFMS.scala 83:11]
        skip @[Action and ActionFMS.scala 81:27]
      else : @[Action and ActionFMS.scala 84:27]
        node _T_15 = eq(act, UInt<2>("h02")) @[Action and ActionFMS.scala 84:18]
        when _T_15 : @[Action and ActionFMS.scala 84:27]
          node _T_16 = sub(io.y, UInt<1>("h01")) @[Action and ActionFMS.scala 85:19]
          node _T_17 = tail(_T_16, 1) @[Action and ActionFMS.scala 85:19]
          y_new <= _T_17 @[Action and ActionFMS.scala 85:11]
          x_new <= io.x @[Action and ActionFMS.scala 86:11]
          skip @[Action and ActionFMS.scala 84:27]
        else : @[Action and ActionFMS.scala 87:5]
          node _T_18 = add(io.x, UInt<1>("h01")) @[Action and ActionFMS.scala 88:19]
          node _T_19 = tail(_T_18, 1) @[Action and ActionFMS.scala 88:19]
          x_new <= _T_19 @[Action and ActionFMS.scala 88:11]
          y_new <= io.y @[Action and ActionFMS.scala 89:11]
          skip @[Action and ActionFMS.scala 87:5]
    node _T_20 = eq(x_new, UInt<3>("h07")) @[Action and ActionFMS.scala 91:14]
    node _T_21 = eq(x_new, UInt<3>("h05")) @[Action and ActionFMS.scala 91:31]
    node _T_22 = or(_T_20, _T_21) @[Action and ActionFMS.scala 91:22]
    node _T_23 = eq(y_new, UInt<3>("h07")) @[Action and ActionFMS.scala 91:48]
    node _T_24 = or(_T_22, _T_23) @[Action and ActionFMS.scala 91:39]
    node _T_25 = eq(y_new, UInt<3>("h05")) @[Action and ActionFMS.scala 91:65]
    node _T_26 = or(_T_24, _T_25) @[Action and ActionFMS.scala 91:56]
    when _T_26 : @[Action and ActionFMS.scala 91:73]
      io.validAction <= UInt<1>("h00") @[Action and ActionFMS.scala 92:19]
      skip @[Action and ActionFMS.scala 91:73]
    else : @[Action and ActionFMS.scala 93:4]
      node _T_27 = mul(UInt<3>("h05"), y_new) @[Action and ActionFMS.scala 94:25]
      node _T_28 = add(x_new, _T_27) @[Action and ActionFMS.scala 94:21]
      node _T_29 = tail(_T_28, 1) @[Action and ActionFMS.scala 94:21]
      new_state <= _T_29 @[Action and ActionFMS.scala 94:14]
      io.validAction <= UInt<1>("h01") @[Action and ActionFMS.scala 95:19]
      skip @[Action and ActionFMS.scala 93:4]
    io.act <= act @[Action and ActionFMS.scala 97:9]
    io.new_state <= new_state @[Action and ActionFMS.scala 98:15]
    
  module takingAction : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip x : UInt<3>, flip y : UInt<3>, flip rand1 : UInt<10>, flip rand2 : UInt<10>, flip episode : UInt<9>, new_state : UInt<6>, flip action_at_Qmax : UInt<2>, act : UInt<2>, flip reset_Action : UInt<1>, move_to_confirming_Reward : UInt<1>}
    
    inst action_fms of Action_FMS @[taking_Action.scala 16:24]
    action_fms.clock <= clock
    action_fms.reset <= reset
    inst action of Action @[taking_Action.scala 17:20]
    action.clock <= clock
    action.reset <= reset
    reg epsilon : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[taking_Action.scala 18:24]
    node _T = mul(io.episode, UInt<4>("h0a")) @[taking_Action.scala 19:34]
    node _T_1 = div(_T, UInt<2>("h03")) @[taking_Action.scala 19:41]
    node _T_2 = sub(UInt<10>("h03e8"), _T_1) @[taking_Action.scala 19:21]
    node _T_3 = tail(_T_2, 1) @[taking_Action.scala 19:21]
    epsilon <= _T_3 @[taking_Action.scala 19:11]
    node exploit = leq(epsilon, io.rand1) @[taking_Action.scala 20:23]
    action_fms.io.reset_Action_fms <= io.reset_Action @[taking_Action.scala 22:33]
    action_fms.io.exploit <= exploit @[taking_Action.scala 23:24]
    action_fms.io.validAction <= action.io.validAction @[taking_Action.scala 24:28]
    action.io.exploit <= exploit @[taking_Action.scala 27:20]
    action.io.rand2 <= io.rand2 @[taking_Action.scala 28:18]
    action.io.x <= io.x @[taking_Action.scala 29:14]
    action.io.y <= io.y @[taking_Action.scala 30:14]
    action.io.action_at_Qmax <= io.action_at_Qmax @[taking_Action.scala 31:27]
    io.act <= action.io.act @[taking_Action.scala 33:9]
    io.new_state <= action.io.new_state @[taking_Action.scala 34:15]
    io.move_to_confirming_Reward <= action_fms.io.move_to_confirming_Reward @[taking_Action.scala 35:31]
    
