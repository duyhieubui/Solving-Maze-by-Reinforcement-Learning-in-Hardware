;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit LFSR : 
  module MaxPeriodFibonacciLFSR : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[10]}, flip increment : UInt<1>, out : UInt<1>[10]}
    
    wire _T : UInt<1>[10] @[PRNG.scala 38:28]
    _T[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _T[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[10], clock with : (reset => (reset, _T)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T_1 = xor(state[9], state[6]) @[LFSR.scala 15:41]
      state[0] <= _T_1 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    
  module MaxPeriodFibonacciLFSR_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[10]}, flip increment : UInt<1>, out : UInt<1>[10]}
    
    wire _T : UInt<1>[10] @[PRNG.scala 38:28]
    _T[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _T[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[10], clock with : (reset => (reset, _T)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T_1 = xor(state[9], state[6]) @[LFSR.scala 15:41]
      state[0] <= _T_1 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    
  module LFSR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {rand1 : UInt<10>, rand2 : UInt<10>, flip get : UInt<1>}
    
    when io.get : @[draft.scala 17:15]
      inst MaxPeriodFibonacciLFSR of MaxPeriodFibonacciLFSR @[PRNG.scala 82:22]
      MaxPeriodFibonacciLFSR.clock <= clock
      MaxPeriodFibonacciLFSR.reset <= reset
      MaxPeriodFibonacciLFSR.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
      MaxPeriodFibonacciLFSR.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
      node _T = cat(MaxPeriodFibonacciLFSR.io.out[1], MaxPeriodFibonacciLFSR.io.out[0]) @[PRNG.scala 86:17]
      node _T_1 = cat(MaxPeriodFibonacciLFSR.io.out[4], MaxPeriodFibonacciLFSR.io.out[3]) @[PRNG.scala 86:17]
      node _T_2 = cat(_T_1, MaxPeriodFibonacciLFSR.io.out[2]) @[PRNG.scala 86:17]
      node _T_3 = cat(_T_2, _T) @[PRNG.scala 86:17]
      node _T_4 = cat(MaxPeriodFibonacciLFSR.io.out[6], MaxPeriodFibonacciLFSR.io.out[5]) @[PRNG.scala 86:17]
      node _T_5 = cat(MaxPeriodFibonacciLFSR.io.out[9], MaxPeriodFibonacciLFSR.io.out[8]) @[PRNG.scala 86:17]
      node _T_6 = cat(_T_5, MaxPeriodFibonacciLFSR.io.out[7]) @[PRNG.scala 86:17]
      node _T_7 = cat(_T_6, _T_4) @[PRNG.scala 86:17]
      node _T_8 = cat(_T_7, _T_3) @[PRNG.scala 86:17]
      io.rand1 <= _T_8 @[draft.scala 18:13]
      inst MaxPeriodFibonacciLFSR_1 of MaxPeriodFibonacciLFSR_1 @[PRNG.scala 82:22]
      MaxPeriodFibonacciLFSR_1.clock <= clock
      MaxPeriodFibonacciLFSR_1.reset <= reset
      MaxPeriodFibonacciLFSR_1.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
      MaxPeriodFibonacciLFSR_1.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
      node _T_9 = cat(MaxPeriodFibonacciLFSR_1.io.out[1], MaxPeriodFibonacciLFSR_1.io.out[0]) @[PRNG.scala 86:17]
      node _T_10 = cat(MaxPeriodFibonacciLFSR_1.io.out[4], MaxPeriodFibonacciLFSR_1.io.out[3]) @[PRNG.scala 86:17]
      node _T_11 = cat(_T_10, MaxPeriodFibonacciLFSR_1.io.out[2]) @[PRNG.scala 86:17]
      node _T_12 = cat(_T_11, _T_9) @[PRNG.scala 86:17]
      node _T_13 = cat(MaxPeriodFibonacciLFSR_1.io.out[6], MaxPeriodFibonacciLFSR_1.io.out[5]) @[PRNG.scala 86:17]
      node _T_14 = cat(MaxPeriodFibonacciLFSR_1.io.out[9], MaxPeriodFibonacciLFSR_1.io.out[8]) @[PRNG.scala 86:17]
      node _T_15 = cat(_T_14, MaxPeriodFibonacciLFSR_1.io.out[7]) @[PRNG.scala 86:17]
      node _T_16 = cat(_T_15, _T_13) @[PRNG.scala 86:17]
      node _T_17 = cat(_T_16, _T_12) @[PRNG.scala 86:17]
      io.rand2 <= _T_17 @[draft.scala 19:13]
      skip @[draft.scala 17:15]
    
