circuit Action :
  module Action :
    input clock : Clock
    input reset : UInt<1>
    input io_x : UInt<3>
    input io_y : UInt<3>
    output io_move_to_checking_reward : UInt<1>
    input io_rand1 : UInt<10>
    input io_rand2 : UInt<10>
    input io_episode : UInt<9>
    output io_new_state : UInt<6>
    output io_act : UInt<2>
    input io_reset_Action : UInt<1>
    input io_action_with_greatest_Qval : UInt<2>
  
    reg epsilon : UInt<14>, clock with :
      reset => (UInt<1>("h0"), epsilon) @[Action.scala 18:24]
    reg act : UInt<2>, clock with :
      reset => (UInt<1>("h0"), act) @[Action.scala 19:20]
    reg x_new : UInt<3>, clock with :
      reset => (UInt<1>("h0"), x_new) @[Action.scala 20:22]
    reg y_new : UInt<3>, clock with :
      reset => (UInt<1>("h0"), y_new) @[Action.scala 21:22]
    reg new_state : UInt<6>, clock with :
      reset => (UInt<1>("h0"), new_state) @[Action.scala 22:24]
    reg move_to_checking_reward : UInt<1>, clock with :
      reset => (UInt<1>("h0"), move_to_checking_reward) @[Action.scala 23:34]
    reg index : UInt<2>, clock with :
      reset => (UInt<1>("h0"), index) @[Action.scala 24:20]
    node _T = mul(io_episode, UInt<4>("ha")) @[Action.scala 25:34]
    node _T_1 = div(_T, UInt<2>("h3")) @[Action.scala 25:41]
    node _T_2 = sub(UInt<10>("h3e8"), _T_1) @[Action.scala 25:21]
    node _T_3 = tail(_T_2, 1) @[Action.scala 25:21]
    reg stateReg : UInt<3>, clock with :
      reset => (UInt<1>("h0"), stateReg) @[Action.scala 28:23]
    node _T_4 = bits(reset, 0, 0) @[Action.scala 34:11]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Action.scala 34:11]
    node _GEN_0 = mux(io_reset_Action, UInt<3>("h0"), stateReg) @[Action.scala 29:24]
    node _GEN_1 = mux(io_reset_Action, UInt<1>("h0"), x_new) @[Action.scala 29:24]
    node _GEN_2 = mux(io_reset_Action, UInt<1>("h0"), y_new) @[Action.scala 29:24]
    node _GEN_3 = mux(io_reset_Action, UInt<1>("h0"), new_state) @[Action.scala 29:24]
    node _T_6 = eq(UInt<3>("h0"), stateReg) @[Conditional.scala 37:30]
    node _T_7 = leq(epsilon, io_rand1) @[Action.scala 39:20]
    node _GEN_4 = mux(_T_7, UInt<3>("h1"), UInt<3>("h2")) @[Action.scala 39:33]
    node _T_8 = eq(UInt<3>("h1"), stateReg) @[Conditional.scala 37:30]
    node _T_9 = eq(UInt<3>("h2"), stateReg) @[Conditional.scala 37:30]
    node _T_10 = leq(io_rand2, UInt<8>("hfa")) @[Action.scala 51:21]
    node _T_11 = lt(UInt<8>("hfa"), io_rand2) @[Action.scala 53:24]
    node _T_12 = leq(io_rand2, UInt<9>("h1f4")) @[Action.scala 53:45]
    node _T_13 = eq(_T_12, UInt<1>("h1")) @[Action.scala 53:54]
    node _T_14 = and(_T_11, _T_13) @[Action.scala 53:34]
    node _T_15 = lt(UInt<9>("h1f4"), io_rand2) @[Action.scala 55:24]
    node _T_16 = leq(io_rand2, UInt<10>("h2ee")) @[Action.scala 55:45]
    node _T_17 = eq(_T_16, UInt<1>("h1")) @[Action.scala 55:54]
    node _T_18 = and(_T_15, _T_17) @[Action.scala 55:34]
    node _GEN_5 = mux(_T_18, UInt<2>("h2"), UInt<2>("h3")) @[Action.scala 55:65]
    node _GEN_6 = mux(_T_14, UInt<1>("h1"), _GEN_5) @[Action.scala 53:64]
    node _GEN_7 = mux(_T_10, UInt<1>("h0"), _GEN_6) @[Action.scala 51:31]
    node _T_19 = eq(UInt<3>("h3"), stateReg) @[Conditional.scala 37:30]
    node _T_20 = eq(act, UInt<1>("h0")) @[Action.scala 63:16]
    node _T_21 = add(io_y, UInt<1>("h1")) @[Action.scala 64:23]
    node _T_22 = tail(_T_21, 1) @[Action.scala 64:23]
    node _T_23 = eq(act, UInt<1>("h1")) @[Action.scala 66:22]
    node _T_24 = sub(io_x, UInt<1>("h1")) @[Action.scala 67:23]
    node _T_25 = tail(_T_24, 1) @[Action.scala 67:23]
    node _T_26 = eq(act, UInt<2>("h2")) @[Action.scala 69:22]
    node _T_27 = sub(io_y, UInt<1>("h1")) @[Action.scala 70:23]
    node _T_28 = tail(_T_27, 1) @[Action.scala 70:23]
    node _T_29 = add(io_x, UInt<1>("h1")) @[Action.scala 73:23]
    node _T_30 = tail(_T_29, 1) @[Action.scala 73:23]
    node _GEN_8 = mux(_T_26, _T_28, io_y) @[Action.scala 69:31]
    node _GEN_9 = mux(_T_26, io_x, _T_30) @[Action.scala 69:31]
    node _GEN_10 = mux(_T_23, _T_25, _GEN_9) @[Action.scala 66:31]
    node _GEN_11 = mux(_T_23, io_y, _GEN_8) @[Action.scala 66:31]
    node _GEN_12 = mux(_T_20, _T_22, _GEN_11) @[Action.scala 63:25]
    node _GEN_13 = mux(_T_20, io_x, _GEN_10) @[Action.scala 63:25]
    node _T_31 = eq(UInt<3>("h4"), stateReg) @[Conditional.scala 37:30]
    node _T_32 = eq(x_new, UInt<3>("h7")) @[Action.scala 78:18]
    node _T_33 = eq(x_new, UInt<3>("h5")) @[Action.scala 78:35]
    node _T_34 = or(_T_32, _T_33) @[Action.scala 78:26]
    node _T_35 = eq(y_new, UInt<3>("h7")) @[Action.scala 78:52]
    node _T_36 = or(_T_34, _T_35) @[Action.scala 78:43]
    node _T_37 = eq(y_new, UInt<3>("h5")) @[Action.scala 78:69]
    node _T_38 = or(_T_36, _T_37) @[Action.scala 78:60]
    node _T_39 = mul(UInt<3>("h5"), y_new) @[Action.scala 83:29]
    node _T_40 = add(x_new, _T_39) @[Action.scala 83:25]
    node _T_41 = tail(_T_40, 1) @[Action.scala 83:25]
    node _GEN_14 = mux(_T_38, UInt<3>("h0"), _GEN_0) @[Action.scala 78:77]
    node _GEN_15 = mux(_T_38, UInt<1>("h0"), UInt<1>("h1")) @[Action.scala 78:77]
    node _GEN_16 = mux(_T_38, _GEN_3, _T_41) @[Action.scala 78:77]
    node _GEN_17 = mux(_T_31, _GEN_14, _GEN_0) @[Conditional.scala 39:67]
    node _GEN_18 = mux(_T_31, _GEN_15, move_to_checking_reward) @[Conditional.scala 39:67]
    node _GEN_19 = mux(_T_31, _GEN_16, _GEN_3) @[Conditional.scala 39:67]
    node _GEN_20 = mux(_T_19, UInt<3>("h4"), _GEN_17) @[Conditional.scala 39:67]
    node _GEN_21 = mux(_T_19, _GEN_12, _GEN_2) @[Conditional.scala 39:67]
    node _GEN_22 = mux(_T_19, _GEN_13, _GEN_1) @[Conditional.scala 39:67]
    node _GEN_23 = mux(_T_19, move_to_checking_reward, _GEN_18) @[Conditional.scala 39:67]
    node _GEN_24 = mux(_T_19, _GEN_3, _GEN_19) @[Conditional.scala 39:67]
    node _GEN_25 = mux(_T_9, UInt<3>("h3"), _GEN_20) @[Conditional.scala 39:67]
    node _GEN_26 = mux(_T_9, _GEN_7, act) @[Conditional.scala 39:67]
    node _GEN_27 = mux(_T_9, _GEN_2, _GEN_21) @[Conditional.scala 39:67]
    node _GEN_28 = mux(_T_9, _GEN_1, _GEN_22) @[Conditional.scala 39:67]
    node _GEN_29 = mux(_T_9, move_to_checking_reward, _GEN_23) @[Conditional.scala 39:67]
    node _GEN_30 = mux(_T_9, _GEN_3, _GEN_24) @[Conditional.scala 39:67]
    node _GEN_31 = mux(_T_8, UInt<3>("h3"), _GEN_25) @[Conditional.scala 39:67]
    node _GEN_32 = mux(_T_8, index, _GEN_26) @[Conditional.scala 39:67]
    node _GEN_33 = mux(_T_8, _GEN_2, _GEN_27) @[Conditional.scala 39:67]
    node _GEN_34 = mux(_T_8, _GEN_1, _GEN_28) @[Conditional.scala 39:67]
    node _GEN_35 = mux(_T_8, move_to_checking_reward, _GEN_29) @[Conditional.scala 39:67]
    node _GEN_36 = mux(_T_8, _GEN_3, _GEN_30) @[Conditional.scala 39:67]
    node _GEN_37 = mux(_T_6, _GEN_4, _GEN_31) @[Conditional.scala 40:58]
    node _GEN_38 = mux(_T_6, act, _GEN_32) @[Conditional.scala 40:58]
    node _GEN_39 = mux(_T_6, _GEN_2, _GEN_33) @[Conditional.scala 40:58]
    node _GEN_40 = mux(_T_6, _GEN_1, _GEN_34) @[Conditional.scala 40:58]
    node _GEN_41 = mux(_T_6, move_to_checking_reward, _GEN_35) @[Conditional.scala 40:58]
    node _GEN_42 = mux(_T_6, _GEN_3, _GEN_36) @[Conditional.scala 40:58]
    io_move_to_checking_reward <= move_to_checking_reward @[Action.scala 89:29]
    io_new_state <= new_state @[Action.scala 88:15]
    io_act <= act @[Action.scala 87:9]
    epsilon <= mux(reset, UInt<14>("h0"), _T_3) @[Action.scala 25:11]
    act <= mux(reset, UInt<2>("h0"), _GEN_38) @[Action.scala 47:11 Action.scala 52:13 Action.scala 54:13 Action.scala 56:13 Action.scala 58:13]
    x_new <= mux(reset, UInt<3>("h0"), _GEN_40) @[Action.scala 31:10 Action.scala 65:15 Action.scala 67:15 Action.scala 71:15 Action.scala 73:15]
    y_new <= mux(reset, UInt<3>("h0"), _GEN_39) @[Action.scala 32:10 Action.scala 64:15 Action.scala 68:15 Action.scala 70:15 Action.scala 74:15]
    new_state <= mux(reset, UInt<6>("h0"), _GEN_42) @[Action.scala 33:14 Action.scala 83:18]
    move_to_checking_reward <= _GEN_41 @[Action.scala 80:32 Action.scala 82:33]
    index <= mux(reset, UInt<2>("h0"), io_action_with_greatest_Qval) @[Action.scala 26:8]
    stateReg <= mux(reset, UInt<3>("h0"), _GEN_37) @[Action.scala 30:13 Action.scala 40:18 Action.scala 42:18 Action.scala 46:16 Action.scala 50:16 Action.scala 62:16 Action.scala 79:18]
    printf(clock, and(and(and(UInt<1>("h1"), io_reset_Action), _T_5), UInt<1>("h1")), "dung ma") @[Action.scala 34:11]
