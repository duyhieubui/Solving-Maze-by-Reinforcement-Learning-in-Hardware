;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit Action : 
  module Action : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip x : UInt<3>, flip y : UInt<3>, move_to_checking_reward : UInt<1>, flip rand1 : UInt<10>, flip rand2 : UInt<10>, flip episode : UInt<9>, new_state : UInt<6>, act : UInt<2>, flip reset_Action : UInt<1>, flip action_with_greatest_Qval : UInt<2>}
    
    reg epsilon : UInt<14>, clock with : (reset => (reset, UInt<14>("h00"))) @[Action.scala 18:24]
    reg act : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action.scala 19:20]
    reg x_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action.scala 20:22]
    reg y_new : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action.scala 21:22]
    reg new_state : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Action.scala 22:24]
    reg move_to_checking_reward : UInt<1>, clock @[Action.scala 23:34]
    reg index : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Action.scala 24:20]
    node _T = mul(io.episode, UInt<4>("h0a")) @[Action.scala 25:34]
    node _T_1 = div(_T, UInt<2>("h03")) @[Action.scala 25:41]
    node _T_2 = sub(UInt<10>("h03e8"), _T_1) @[Action.scala 25:21]
    node _T_3 = tail(_T_2, 1) @[Action.scala 25:21]
    epsilon <= _T_3 @[Action.scala 25:11]
    index <= io.action_with_greatest_Qval @[Action.scala 26:8]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Action.scala 28:23]
    when io.reset_Action : @[Action.scala 29:24]
      stateReg <= UInt<3>("h00") @[Action.scala 30:13]
      x_new <= UInt<1>("h00") @[Action.scala 31:10]
      y_new <= UInt<1>("h00") @[Action.scala 32:10]
      new_state <= UInt<1>("h00") @[Action.scala 33:14]
      node _T_4 = bits(reset, 0, 0) @[Action.scala 34:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Action.scala 34:11]
      when _T_5 : @[Action.scala 34:11]
        printf(clock, UInt<1>(1), "dung ma") @[Action.scala 34:11]
        skip @[Action.scala 34:11]
      skip @[Action.scala 29:24]
    node _T_6 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      node _T_7 = leq(epsilon, io.rand1) @[Action.scala 39:20]
      when _T_7 : @[Action.scala 39:33]
        stateReg <= UInt<3>("h01") @[Action.scala 40:18]
        skip @[Action.scala 39:33]
      else : @[Action.scala 41:9]
        stateReg <= UInt<3>("h02") @[Action.scala 42:18]
        skip @[Action.scala 41:9]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_8 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_8 : @[Conditional.scala 39:67]
        stateReg <= UInt<3>("h03") @[Action.scala 46:16]
        act <= index @[Action.scala 47:11]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          stateReg <= UInt<3>("h03") @[Action.scala 50:16]
          node _T_10 = leq(io.rand2, UInt<8>("h0fa")) @[Action.scala 51:21]
          when _T_10 : @[Action.scala 51:31]
            act <= UInt<1>("h00") @[Action.scala 52:13]
            skip @[Action.scala 51:31]
          else : @[Action.scala 53:64]
            node _T_11 = lt(UInt<8>("h0fa"), io.rand2) @[Action.scala 53:24]
            node _T_12 = leq(io.rand2, UInt<9>("h01f4")) @[Action.scala 53:45]
            node _T_13 = eq(_T_12, UInt<1>("h01")) @[Action.scala 53:54]
            node _T_14 = and(_T_11, _T_13) @[Action.scala 53:34]
            when _T_14 : @[Action.scala 53:64]
              act <= UInt<1>("h01") @[Action.scala 54:13]
              skip @[Action.scala 53:64]
            else : @[Action.scala 55:65]
              node _T_15 = lt(UInt<9>("h01f4"), io.rand2) @[Action.scala 55:24]
              node _T_16 = leq(io.rand2, UInt<10>("h02ee")) @[Action.scala 55:45]
              node _T_17 = eq(_T_16, UInt<1>("h01")) @[Action.scala 55:54]
              node _T_18 = and(_T_15, _T_17) @[Action.scala 55:34]
              when _T_18 : @[Action.scala 55:65]
                act <= UInt<2>("h02") @[Action.scala 56:13]
                skip @[Action.scala 55:65]
              else : @[Action.scala 57:9]
                act <= UInt<2>("h03") @[Action.scala 58:13]
                skip @[Action.scala 57:9]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_19 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_19 : @[Conditional.scala 39:67]
            stateReg <= UInt<3>("h04") @[Action.scala 62:16]
            node _T_20 = eq(act, UInt<1>("h00")) @[Action.scala 63:16]
            when _T_20 : @[Action.scala 63:25]
              node _T_21 = add(io.y, UInt<1>("h01")) @[Action.scala 64:23]
              node _T_22 = tail(_T_21, 1) @[Action.scala 64:23]
              y_new <= _T_22 @[Action.scala 64:15]
              x_new <= io.x @[Action.scala 65:15]
              skip @[Action.scala 63:25]
            else : @[Action.scala 66:31]
              node _T_23 = eq(act, UInt<1>("h01")) @[Action.scala 66:22]
              when _T_23 : @[Action.scala 66:31]
                node _T_24 = sub(io.x, UInt<1>("h01")) @[Action.scala 67:23]
                node _T_25 = tail(_T_24, 1) @[Action.scala 67:23]
                x_new <= _T_25 @[Action.scala 67:15]
                y_new <= io.y @[Action.scala 68:15]
                skip @[Action.scala 66:31]
              else : @[Action.scala 69:31]
                node _T_26 = eq(act, UInt<2>("h02")) @[Action.scala 69:22]
                when _T_26 : @[Action.scala 69:31]
                  node _T_27 = sub(io.y, UInt<1>("h01")) @[Action.scala 70:23]
                  node _T_28 = tail(_T_27, 1) @[Action.scala 70:23]
                  y_new <= _T_28 @[Action.scala 70:15]
                  x_new <= io.x @[Action.scala 71:15]
                  skip @[Action.scala 69:31]
                else : @[Action.scala 72:9]
                  node _T_29 = add(io.x, UInt<1>("h01")) @[Action.scala 73:23]
                  node _T_30 = tail(_T_29, 1) @[Action.scala 73:23]
                  x_new <= _T_30 @[Action.scala 73:15]
                  y_new <= io.y @[Action.scala 74:15]
                  skip @[Action.scala 72:9]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_31 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_31 : @[Conditional.scala 39:67]
              node _T_32 = eq(x_new, UInt<3>("h07")) @[Action.scala 78:18]
              node _T_33 = eq(x_new, UInt<3>("h05")) @[Action.scala 78:35]
              node _T_34 = or(_T_32, _T_33) @[Action.scala 78:26]
              node _T_35 = eq(y_new, UInt<3>("h07")) @[Action.scala 78:52]
              node _T_36 = or(_T_34, _T_35) @[Action.scala 78:43]
              node _T_37 = eq(y_new, UInt<3>("h05")) @[Action.scala 78:69]
              node _T_38 = or(_T_36, _T_37) @[Action.scala 78:60]
              when _T_38 : @[Action.scala 78:77]
                stateReg <= UInt<3>("h00") @[Action.scala 79:18]
                move_to_checking_reward <= UInt<1>("h00") @[Action.scala 80:32]
                skip @[Action.scala 78:77]
              else : @[Action.scala 81:8]
                move_to_checking_reward <= UInt<1>("h01") @[Action.scala 82:33]
                node _T_39 = mul(UInt<3>("h05"), y_new) @[Action.scala 83:29]
                node _T_40 = add(x_new, _T_39) @[Action.scala 83:25]
                node _T_41 = tail(_T_40, 1) @[Action.scala 83:25]
                new_state <= _T_41 @[Action.scala 83:18]
                skip @[Action.scala 81:8]
              skip @[Conditional.scala 39:67]
    io.act <= act @[Action.scala 87:9]
    io.new_state <= new_state @[Action.scala 88:15]
    io.move_to_checking_reward <= move_to_checking_reward @[Action.scala 89:29]
    
